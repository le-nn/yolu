{
  "README.html": {
    "href": "README.html",
    "title": "Yolu | Yolu",
    "keywords": "Yolu Yolu provides utilities and language extensions aimed to improve development productivity and extend the .NET API with unique features. Documentation https://le-nn.github.io/yolu/ Install Please install via package manager. .NET CLI PackageReference dotnet add package Yolu --version VERSION_NUMBER <PackageReference Include=\"Yolu\" Version=\"VERSION_NUMBER\" /> Install from Nuget https://www.nuget.org/packages/yolu Features Introducing some of the functions Range Expression Foreach: Make range expression available in foreach. Arrays: Provides a safe, fast, convenient and unified array/mutable-array Buffer: Provides utils and a mechanism to safely and quickly pool Buffers containing native memory Error/TryCatch : It supplements features that are not sufficient with system exceptions, and provides a mechanism to handle them safely and type-safely. Pipeline: Express functional programming-like pipeline operators with method chains Utils: Provides various utils, helpers and extensions"
  },
  "api/Yolu.AsyncPipeline-1.html": {
    "href": "api/Yolu.AsyncPipeline-1.html",
    "title": "Struct AsyncPipeline<T> | Yolu",
    "keywords": "Struct AsyncPipeline<T> Represents pipeline operator. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu Assembly: Yolu.dll Syntax public readonly struct AsyncPipeline<T> Type Parameters Name Description T The value that you want to pipe. Remarks Initializes a new instance of the AsyncPipeline<T> class. Constructors | Edit this page View Source AsyncPipeline(Func<Task<T>>) Represents pipeline operator. Declaration public AsyncPipeline(Func<Task<T>> func) Parameters Type Name Description Func<Task<T>> func The value selector. Remarks Initializes a new instance of the AsyncPipeline<T> class. Methods | Edit this page View Source ActionAsync(Action<T>) Interrupt action. Declaration public AsyncPipeline<T> ActionAsync(Action<T> func) Parameters Type Name Description Action<T> func To Interrupt async action Returns Type Description AsyncPipeline<T> | Edit this page View Source ActionAsync(Func<T, Task>) Interrupt action. Declaration public AsyncPipeline<T> ActionAsync(Func<T, Task> func) Parameters Type Name Description Func<T, Task> func To Interrupt async action Returns Type Description AsyncPipeline<T> | Edit this page View Source AsPipeline() Declaration public Pipeline<Task<T>> AsPipeline() Returns Type Description Pipeline<Task<T>> | Edit this page View Source ExecuteAsync() Execute all piped actions async. Declaration public Task<T> ExecuteAsync() Returns Type Description Task<T> | Edit this page View Source PipeAsync<U>(Func<T, Task<U>>) Connects and convolves a series of functions and return values. Declaration public AsyncPipeline<U> PipeAsync<U>(Func<T, Task<U>> func) Parameters Type Name Description Func<T, Task<U>> func To pipe function Returns Type Description AsyncPipeline<U> Type Parameters Name Description U Argument type | Edit this page View Source PipeAsync<U>(Func<T, U>) Connects and convolves a series of functions and return values. Declaration public AsyncPipeline<U> PipeAsync<U>(Func<T, U> func) Parameters Type Name Description Func<T, U> func To pipe function Returns Type Description AsyncPipeline<U> Type Parameters Name Description U Argument type Extension Methods Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Buffers.SpanOwner-1.html": {
    "href": "api/Yolu.Buffers.SpanOwner-1.html",
    "title": "Struct SpanOwner<T> | Yolu",
    "keywords": "Struct SpanOwner<T> Represents the memory obtained from the pool or allocated on the stack or heap. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu.Buffers Assembly: Yolu.dll Syntax public ref struct SpanOwner<T> Type Parameters Name Description T The type of the elements in the rented memory. Remarks This type is aimed to be compatible with memory allocated using stackalloc operator. If stack allocation threshold is reached (e.g. StackallocThreshold) then it's possible to use pooled memory from arbitrary MemoryPool<T> or Shared. Custom ArrayPool<T> is not supported because default Shared is optimized for per-CPU core allocation which is perfect when the same thread is responsible for renting and releasing the array. Examples const int stackallocThreshold = 20; var memory = size <=stackallocThreshold ? new SpanOwner<byte>(stackalloc byte[stackallocThreshold], size) : new SpanOwner<byte>(size); Constructors | Edit this page View Source SpanOwner(MemoryPool<T>) Rents the memory from the pool. Declaration public SpanOwner(MemoryPool<T> pool) Parameters Type Name Description MemoryPool<T> pool The memory pool. Exceptions Type Condition ArgumentNullException pool is null. | Edit this page View Source SpanOwner(MemoryPool<T>, int, bool) Rents the memory from the pool. Declaration public SpanOwner(MemoryPool<T> pool, int minBufferSize, bool exactSize = true) Parameters Type Name Description MemoryPool<T> pool The memory pool. int minBufferSize The minimum size of the memory to rent. bool exactSize true to return the buffer of minBufferSize length; otherwise, the returned buffer is at least of minBufferSize. Exceptions Type Condition ArgumentNullException pool is null. ArgumentOutOfRangeException minBufferSize is less than or equal to zero. | Edit this page View Source SpanOwner(int, bool) Rents the memory from Shared, if T contains at least one field of reference type; or use NativeMemory. Declaration public SpanOwner(int minBufferSize, bool exactSize = true) Parameters Type Name Description int minBufferSize The minimum size of the memory to rent. bool exactSize true to return the buffer of minBufferSize length; otherwise, the returned buffer is at least of minBufferSize. Exceptions Type Condition ArgumentOutOfRangeException minBufferSize is less than or equal to zero. | Edit this page View Source SpanOwner(Span<T>) Rents the memory referenced by the span. Declaration public SpanOwner(Span<T> span) Parameters Type Name Description Span<T> span The span that references the memory to rent. | Edit this page View Source SpanOwner(Span<T>, int) Rents the memory referenced by the span. Declaration public SpanOwner(Span<T> span, int length) Parameters Type Name Description Span<T> span The span that references the memory to rent. int length The actual length of the data. Properties | Edit this page View Source IsEmpty Gets a value indicating that this object doesn't reference rented memory. Declaration public readonly bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source this[int] Gets the memory element by its index. Declaration public readonly ref T this[int index] { get; } Parameters Type Name Description int index The index of the memory element. Property Value Type Description T The managed pointer to the memory element. | Edit this page View Source Length Gets length of the rented memory. Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source Span Gets the rented memory. Declaration public readonly Span<T> Span { get; } Property Value Type Description Span<T> Methods | Edit this page View Source AlignOf<U>() Gets the alignment requirement for type T, in bytes. Declaration public static int AlignOf<U>() Returns Type Description int The alignment of the type T. Type Parameters Name Description U See Also _Alignof operator in C++ | Edit this page View Source Dispose() Returns the memory back to the pool. Declaration public void Dispose() | Edit this page View Source ToString() Gets textual representation of the rented memory. Declaration public override readonly string ToString() Returns Type Description string The textual representation of the rented memory. Overrides ValueType.ToString() Operators | Edit this page View Source implicit operator SpanOwner<T>(Span<T>) Converts the reference to the already allocated memory into the rental object. Declaration public static implicit operator SpanOwner<T>(Span<T> span) Parameters Type Name Description Span<T> span The allocated memory to convert. Returns Type Description SpanOwner<T>"
  },
  "api/Yolu.Buffers.html": {
    "href": "api/Yolu.Buffers.html",
    "title": "Namespace Yolu.Buffers | Yolu",
    "keywords": "Namespace Yolu.Buffers Structs SpanOwner<T> Represents the memory obtained from the pool or allocated on the stack or heap."
  },
  "api/Yolu.Collections.Array-1.Enumerator.html": {
    "href": "api/Yolu.Collections.Array-1.Enumerator.html",
    "title": "Struct Array<T>.Enumerator | Yolu",
    "keywords": "Struct Array<T>.Enumerator An array enumerator. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public struct Array<T>.Enumerator Remarks It is important that this enumerator does NOT implement IDisposable. We want the iterator to inline when we do foreach and to not result in a try/finally frame in the client. Properties | Edit this page View Source Current Gets the currently enumerated value. Declaration public T Current { get; } Property Value Type Description T Methods | Edit this page View Source MoveNext() Advances to the next value to be enumerated. Declaration public bool MoveNext() Returns Type Description bool true if another item exists in the array; false otherwise. Extension Methods Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.Array-1.html": {
    "href": "api/Yolu.Collections.Array-1.html",
    "title": "Class Array<T> | Yolu",
    "keywords": "Class Array<T> Represents a generic immutable array collection. Inheritance object Array<T> Implements IArray<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public class Array<T> : IArray<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the array. Constructors | Edit this page View Source Array(IEnumerable<T>?) Initializes a new instance of the Array<T> class with the elements from the specified collection. Declaration public Array(IEnumerable<T>? values) Parameters Type Name Description IEnumerable<T> values The collection of elements. | Edit this page View Source Array(int) Initializes a new instance of the Array<T> class with the specified size. Declaration public Array(int size) Parameters Type Name Description int size The size of the array. | Edit this page View Source Array(int, Func<int, T>) Initializes a new instance of the Array<T> class with the specified size and factory function. Declaration public Array(int size, Func<int, T> factory) Parameters Type Name Description int size The size of the array. Func<int, T> factory The factory function used to create each element of the array. | Edit this page View Source Array(ReadOnlySpan<T>) Initializes a new instance of the Array<T> class with the elements from the specified ReadOnlySpan<T>. Declaration public Array(ReadOnlySpan<T> values) Parameters Type Name Description ReadOnlySpan<T> values The ReadOnlySpan<T> containing the elements. | Edit this page View Source Array(T[]?) Initializes a new instance of the Array<T> class with the specified array. Declaration public Array(T[]? values) Parameters Type Name Description T[] values The array of elements. Properties | Edit this page View Source Count Gets the number of elements in the array. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Empty Gets an empty array. Declaration public static Array<T> Empty { get; } Property Value Type Description Array<T> | Edit this page View Source IsDefault Gets a value indicating whether this struct was initialized without an actual array instance. Declaration public bool IsDefault { get; } Property Value Type Description bool | Edit this page View Source IsEmpty Gets a value indicating whether this collection is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source this[int] Gets or sets the element at the specified index in the read-only list. Declaration public T this[int index] { get; } Parameters Type Name Description int index The zero-based index of the element to get. Property Value Type Description T The element at the specified index in the read-only list. Exceptions Type Condition NotSupportedException Always thrown from the setter. InvalidOperationException Thrown if the IsDefault property returns true. | Edit this page View Source Length Gets the number of elements in the collection. Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source SystemArray Gets an untyped reference to the array. Declaration public Array SystemArray { get; } Property Value Type Description Array Methods | Edit this page View Source Add(T) Returns a new array with the specified value inserted at the end. Declaration [Pure] public Array<T> Add(T item) Parameters Type Name Description T item The item to insert at the end of the array. Returns Type Description Array<T> A new array. | Edit this page View Source AddRange(IEnumerable<T>) Adds the specified values to this list. Declaration [Pure] public Array<T> AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The values to add. Returns Type Description Array<T> A new list with the elements added. | Edit this page View Source AddRange(Array<T>) Adds the specified values to this list. Declaration [Pure] public Array<T> AddRange(Array<T> items) Parameters Type Name Description Array<T> items The values to add. Returns Type Description Array<T> A new list with the elements added. | Edit this page View Source As<TOther>() Creates an immutable array for this array, cast to a different element type. Declaration [Pure] public Array<TOther> As<TOther>() where TOther : class Returns Type Description Array<TOther> A struct typed for the base element type. If the cast fails, an instance is returned whose IsDefault property returns true. Type Parameters Name Description TOther The type of array element to return. Remarks Arrays of derived elements types can be cast to arrays of base element types without reallocating the array. These upcasts can be reversed via this same method, casting an array of base element types to their derived types. However, downcasting is only successful when it reverses a prior upcasting operation. | Edit this page View Source CastArray<TOther>() Initializes a new instance of the Array<T> struct by casting the underlying array to an array of type . Declaration [Pure] public Array<TOther> CastArray<TOther>() where TOther : class Returns Type Description Array<TOther> Type Parameters Name Description TOther Exceptions Type Condition InvalidCastException Thrown if the cast is illegal. | Edit this page View Source CastUp<TDerived>(Array<TDerived>) Initializes a new instance of the Array<T> struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array. Declaration [Pure] public static Array<T> CastUp<TDerived>(Array<TDerived> items) where TDerived : class, T Parameters Type Name Description Array<TDerived> items The array to initialize the array with. No copy is made. Returns Type Description Array<T> Type Parameters Name Description TDerived Remarks Covariant upcasts from this method may be reversed by calling the As<TOther>() or CastArray<TOther>()method. | Edit this page View Source Contains(T) Determines whether the specified item exists in the array. Declaration [Pure] public bool Contains(T item) Parameters Type Name Description T item The item to search for. Returns Type Description bool true if an equal value was found in the array; false otherwise. | Edit this page View Source CopyTo(int, T[], int, int) Copies the contents of this array to the specified array. Declaration [Pure] public void CopyTo(int sourceIndex, T[] destination, int destinationIndex, int length) Parameters Type Name Description int sourceIndex The index into this collection of the first element to copy. T[] destination The array to copy to. int destinationIndex The index into the destination array to which the first copied element is written. int length The number of elements to copy. | Edit this page View Source CopyTo(T[]) Copies the contents of this array to the specified array. Declaration [Pure] public void CopyTo(T[] destination) Parameters Type Name Description T[] destination The array to copy to. | Edit this page View Source CopyTo(T[], int) Copies the contents of this array to the specified array. Declaration [Pure] public void CopyTo(T[] destination, int destinationIndex) Parameters Type Name Description T[] destination The array to copy to. int destinationIndex The index into the destination array to which the first copied element is written. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to this instance. Declaration [Pure] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) | Edit this page View Source Equals(Array<T>?) Indicates whether the current object is equal to another object of the same type. Declaration [Pure] public bool Equals(Array<T>? other) Parameters Type Name Description Array<T> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source ForEach(Action<T>) Performs the specified action on each element of the array. Declaration public void ForEach(Action<T> action) Parameters Type Name Description Action<T> action The action to perform on each element. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the array. Declaration public Array<T>.Enumerator GetEnumerator() Returns Type Description Array<T>.Enumerator An enumerator that can be used to iterate through the array. | Edit this page View Source GetHashCode() Returns a hash code for this instance. Declaration [Pure] public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() | Edit this page View Source IndexOf(T) Searches the array for the specified item. Declaration [Pure] public int IndexOf(T item) Parameters Type Name Description T item The item to search for. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source IndexOf(T, int) Searches the array for the specified item. Declaration [Pure] public int IndexOf(T item, int startIndex) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source IndexOf(T, int, IEqualityComparer<T>) Searches the array for the specified item. Declaration [Pure] public int IndexOf(T item, int startIndex, IEqualityComparer<T> equalityComparer) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source IndexOf(T, int, int) Searches the array for the specified item. Declaration [Pure] public int IndexOf(T item, int startIndex, int count) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. int count The number of elements to search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source IndexOf(T, int, int, IEqualityComparer<T>) Searches the array for the specified item. Declaration [Pure] public int IndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. int count The number of elements to search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source Insert(int, T) Returns a new array with the specified value inserted at the specified position. Declaration [Pure] public Array<T> Insert(int index, T item) Parameters Type Name Description int index The 0-based index into the array at which the new item should be added. T item The item to insert at the start of the array. Returns Type Description Array<T> A new array. | Edit this page View Source InsertRange(int, IEnumerable<T>) Inserts the specified values at the specified index. Declaration [Pure] public Array<T> InsertRange(int index, IEnumerable<T> items) Parameters Type Name Description int index The index at which to insert the value. IEnumerable<T> items The elements to insert. Returns Type Description Array<T> The new immutable collection. | Edit this page View Source InsertRange(int, Array<T>) Inserts the specified values at the specified index. Declaration [Pure] public Array<T> InsertRange(int index, Array<T> items) Parameters Type Name Description int index The index at which to insert the value. Array<T> items The elements to insert. Returns Type Description Array<T> The new immutable collection. | Edit this page View Source LastIndexOf(T) Searches the array for the specified item in reverse. Declaration [Pure] public int LastIndexOf(T item) Parameters Type Name Description T item The item to search for. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source LastIndexOf(T, int) Searches the array for the specified item in reverse. Declaration [Pure] public int LastIndexOf(T item, int startIndex) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source LastIndexOf(T, int, int) Searches the array for the specified item in reverse. Declaration [Pure] public int LastIndexOf(T item, int startIndex, int count) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. int count The number of elements to search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source LastIndexOf(T, int, int, IEqualityComparer<T>) Searches the array for the specified item in reverse. Declaration [Pure] public int LastIndexOf(T item, int startIndex, int count, IEqualityComparer<T> equalityComparer) Parameters Type Name Description T item The item to search for. int startIndex The index at which to begin the search. int count The number of elements to search. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description int The 0-based index into the array where the item was found; or -1 if it could not be found. | Edit this page View Source OfType<TResult>() Filters the elements of this array to those assignable to the specified type. Declaration [Pure] public IEnumerable<TResult> OfType<TResult>() Returns Type Description IEnumerable<TResult> An IEnumerable<T> that contains elements from the input sequence of type TResult. Type Parameters Name Description TResult The type to filter the elements of the sequence on. | Edit this page View Source Remove(T) Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned. Declaration [Pure] public Array<T> Remove(T item) Parameters Type Name Description T item The item to remove. Returns Type Description Array<T> The new array. | Edit this page View Source Remove(T, IEqualityComparer<T>) Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned. Declaration [Pure] public Array<T> Remove(T item, IEqualityComparer<T> equalityComparer) Parameters Type Name Description T item The item to remove. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description Array<T> The new array. | Edit this page View Source RemoveAll(Predicate<T>) Removes all the elements that match the conditions defined by the specified predicate. Declaration [Pure] public Array<T> RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The Predicate<T> delegate that defines the conditions of the elements to remove. Returns Type Description Array<T> The new list. | Edit this page View Source RemoveAt(int) Returns an array with the element at the specified position removed. Declaration [Pure] public Array<T> RemoveAt(int index) Parameters Type Name Description int index The 0-based index into the array for the element to omit from the returned array. Returns Type Description Array<T> The new array. | Edit this page View Source RemoveRange(IEnumerable<T>) Removes the specified values from this list. Declaration [Pure] public Array<T> RemoveRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to remove if matches are found in this list. Returns Type Description Array<T> A new list with the elements removed. | Edit this page View Source RemoveRange(IEnumerable<T>, IEqualityComparer<T>) Removes the specified values from this list. Declaration [Pure] public Array<T> RemoveRange(IEnumerable<T> items, IEqualityComparer<T> equalityComparer) Parameters Type Name Description IEnumerable<T> items The items to remove if matches are found in this list. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description Array<T> A new list with the elements removed. | Edit this page View Source RemoveRange(int, int) Returns an array with the elements at the specified position removed. Declaration [Pure] public Array<T> RemoveRange(int index, int length) Parameters Type Name Description int index The 0-based index into the array for the element to omit from the returned array. int length The number of elements to remove. Returns Type Description Array<T> The new array. | Edit this page View Source RemoveRange(Array<T>) Removes the specified values from this list. Declaration [Pure] public Array<T> RemoveRange(Array<T> items) Parameters Type Name Description Array<T> items The items to remove if matches are found in this list. Returns Type Description Array<T> A new list with the elements removed. | Edit this page View Source RemoveRange(Array<T>, IEqualityComparer<T>) Removes the specified values from this list. Declaration [Pure] public Array<T> RemoveRange(Array<T> items, IEqualityComparer<T> equalityComparer) Parameters Type Name Description Array<T> items The items to remove if matches are found in this list. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description Array<T> A new list with the elements removed. | Edit this page View Source Replace(T, T) Replaces the first equal element in the list with the specified element. Declaration [Pure] public Array<T> Replace(T oldValue, T newValue) Parameters Type Name Description T oldValue The element to replace. T newValue The element to replace the old element with. Returns Type Description Array<T> The new list -- even if the value being replaced is equal to the new value for that position. Exceptions Type Condition ArgumentException Thrown when the old value does not exist in the list. | Edit this page View Source Replace(T, T, IEqualityComparer<T>) Replaces the first equal element in the list with the specified element. Declaration [Pure] public Array<T> Replace(T oldValue, T newValue, IEqualityComparer<T> equalityComparer) Parameters Type Name Description T oldValue The element to replace. T newValue The element to replace the old element with. IEqualityComparer<T> equalityComparer The equality comparer to use in the search. Returns Type Description Array<T> The new list -- even if the value being replaced is equal to the new value for that position. Exceptions Type Condition ArgumentException Thrown when the old value does not exist in the list. | Edit this page View Source SetItem(int, T) Returns an array with the item at the specified position replaced. Declaration [Pure] public Array<T> SetItem(int index, T item) Parameters Type Name Description int index The index of the item to replace. T item The new item. Returns Type Description Array<T> The new array. | Edit this page View Source Sort() Returns a sorted instance of this array. Declaration [Pure] public Array<T> Sort() Returns Type Description Array<T> | Edit this page View Source Sort(IComparer<T>) Returns a sorted instance of this array. Declaration [Pure] public Array<T> Sort(IComparer<T> comparer) Parameters Type Name Description IComparer<T> comparer The comparer to use in sorting. If null, the default comparer is used. Returns Type Description Array<T> | Edit this page View Source Sort(int, int, IComparer<T>) Returns a sorted instance of this array. Declaration [Pure] public Array<T> Sort(int index, int count, IComparer<T> comparer) Parameters Type Name Description int index The index of the first element to consider in the sort. int count The number of elements to include in the sort. IComparer<T> comparer The comparer to use in sorting. If null, the default comparer is used. Returns Type Description Array<T> | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators | Edit this page View Source operator ==(Array<T>?, Array<T>?) Checks equality between two instances. Declaration public static bool operator ==(Array<T>? left, Array<T>? right) Parameters Type Name Description Array<T> left The instance to the left of the operator. Array<T> right The instance to the right of the operator. Returns Type Description bool true if the values' underlying arrays are reference equal; false otherwise. | Edit this page View Source operator !=(Array<T>?, Array<T>?) Checks inequality between two instances. Declaration public static bool operator !=(Array<T>? left, Array<T>? right) Parameters Type Name Description Array<T> left The instance to the left of the operator. Array<T> right The instance to the right of the operator. Returns Type Description bool true if the values' underlying arrays are reference not equal; false otherwise. Implements IArray<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionUtils.Append<T>(IEnumerable<T>, params T[]) CollectionUtils.ElementAt<T>(IEnumerable<T>, int, out T) CollectionUtils.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, ValueTask>, CancellationToken) CollectionUtils.ForEach<T>(IEnumerable<T>, Action<T>) CollectionUtils.Prepend<T>(IEnumerable<T>, params T[]) CollectionUtils.SequenceHashCode<T>(IEnumerable<T>, bool) CollectionUtils.ToString<T>(IEnumerable<T>, string, string) WithIndexExtension.WithIndex<T>(IEnumerable<T>) CollectionUtils.Convert<TInput, TOutput>(IReadOnlyCollection<TInput>, Converter<TInput, TOutput>) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.ArrayBuilder.html": {
    "href": "api/Yolu.Collections.ArrayBuilder.html",
    "title": "Class ArrayBuilder | Yolu",
    "keywords": "Class ArrayBuilder Inheritance object ArrayBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public static class ArrayBuilder Methods | Edit this page View Source CreateArray<T>(ReadOnlySpan<T>) Creates a new instance of the Array<T> class with the specified span. Declaration public static Array<T> CreateArray<T>(ReadOnlySpan<T> span) Parameters Type Name Description ReadOnlySpan<T> span The span of elements. Returns Type Description Array<T> A new instance of the Array<T> class. Type Parameters Name Description T The type of elements in the array. | Edit this page View Source CreateIArray<T>(ReadOnlySpan<T>) Creates a new instance of the Array<T> class with the specified span. Declaration public static IArray<T> CreateIArray<T>(ReadOnlySpan<T> span) Parameters Type Name Description ReadOnlySpan<T> span The span of elements. Returns Type Description IArray<T> A new instance of the Array<T> class. Type Parameters Name Description T The type of elements in the array."
  },
  "api/Yolu.Collections.CollectionUtils.ConsumingEnumerable-1.Enumerator.html": {
    "href": "api/Yolu.Collections.CollectionUtils.ConsumingEnumerable-1.Enumerator.html",
    "title": "Struct CollectionUtils.ConsumingEnumerable<T>.Enumerator | Yolu",
    "keywords": "Struct CollectionUtils.ConsumingEnumerable<T>.Enumerator Represents consumer enumerator. Implements IEnumerator<T> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public struct CollectionUtils.ConsumingEnumerable<T>.Enumerator : IEnumerator<T>, IEnumerator, IDisposable Properties | Edit this page View Source Current Gets consumed item from the underlying collection. Declaration public readonly T Current { get; } Property Value Type Description T Methods | Edit this page View Source MoveNext() Consumes the item from the underlying collection. Declaration public bool MoveNext() Returns Type Description bool true if the item has been consumed successfully; false if underlying collection is empty. Implements IEnumerator<T> IEnumerator IDisposable Extension Methods Enumerator.Limit<T>(IEnumerator<T>, int, bool) Enumerator.Skip<T>(IEnumerator<T>, int) Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.CollectionUtils.ConsumingEnumerable-1.html": {
    "href": "api/Yolu.Collections.CollectionUtils.ConsumingEnumerable-1.html",
    "title": "Struct CollectionUtils.ConsumingEnumerable<T> | Yolu",
    "keywords": "Struct CollectionUtils.ConsumingEnumerable<T> Represents a wrapped for method TryTake(out T) in the form of enumerable collection. Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public readonly struct CollectionUtils.ConsumingEnumerable<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the collection. Methods | Edit this page View Source GetEnumerator() Gets consumer enumerator. Declaration public CollectionUtils.ConsumingEnumerable<T>.Enumerator GetEnumerator() Returns Type Description CollectionUtils.ConsumingEnumerable<T>.Enumerator The enumerator wrapping method TryTake(out T). Implements IEnumerable<T> IEnumerable Extension Methods CollectionUtils.Append<T>(IEnumerable<T>, params T[]) CollectionUtils.ElementAt<T>(IEnumerable<T>, int, out T) CollectionUtils.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, ValueTask>, CancellationToken) CollectionUtils.ForEach<T>(IEnumerable<T>, Action<T>) CollectionUtils.Prepend<T>(IEnumerable<T>, params T[]) CollectionUtils.SequenceHashCode<T>(IEnumerable<T>, bool) CollectionUtils.ToString<T>(IEnumerable<T>, string, string) WithIndexExtension.WithIndex<T>(IEnumerable<T>) Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.CollectionUtils.html": {
    "href": "api/Yolu.Collections.CollectionUtils.html",
    "title": "Class CollectionUtils | Yolu",
    "keywords": "Class CollectionUtils Provides utility methods to work with collections. Inheritance object CollectionUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public static class CollectionUtils Methods | Edit this page View Source AddAll<T>(ICollection<T>, IEnumerable<T>) Adds multiple items into collection. Declaration public static void AddAll<T>(this ICollection<T> collection, IEnumerable<T> items) Parameters Type Name Description ICollection<T> collection A collection to modify. IEnumerable<T> items An items to add into collection. Type Parameters Name Description T The type of elements in the collection. | Edit this page View Source Append<T>(IEnumerable<T>, params T[]) Adds items to the end of collection. Declaration public static IEnumerable<T> Append<T>(this IEnumerable<T> collection, params T[] items) Parameters Type Name Description IEnumerable<T> collection The collection to be concatenated with the items. T[] items The items to be added to the end of the collection. Returns Type Description IEnumerable<T> The concatenated collection. Type Parameters Name Description T The type of items in the collection. | Edit this page View Source Convert<TInput, TOutput>(IReadOnlyCollection<TInput>, Converter<TInput, TOutput>) Returns lazily converted read-only collection. Declaration public static ReadOnlyCollectionView<TInput, TOutput> Convert<TInput, TOutput>(this IReadOnlyCollection<TInput> collection, Converter<TInput, TOutput> converter) Parameters Type Name Description IReadOnlyCollection<TInput> collection Read-only collection to convert. Converter<TInput, TOutput> converter A collection item conversion function. Returns Type Description ReadOnlyCollectionView<TInput, TOutput> Lazily converted read-only collection. Type Parameters Name Description TInput Type of items in the source collection. TOutput Type of items in the target collection. | Edit this page View Source ElementAt<T>(IEnumerable<T>, int, out T) Obtains element at the specified index in the sequence. Declaration public static bool ElementAt<T>(this IEnumerable<T> collection, int index, out T element) Parameters Type Name Description IEnumerable<T> collection Source collection. int index Index of the element to read. T element Obtained element. Returns Type Description bool true, if element is available in the collection and obtained successfully; otherwise, false. Type Parameters Name Description T Type of elements in the sequence. Remarks This method is optimized for types IList<T> and IReadOnlyList<T>. | Edit this page View Source ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, ValueTask>, CancellationToken) Applies the specified asynchronous action to each collection element. Declaration public static ValueTask ForEachAsync<T>(this IEnumerable<T> collection, Func<T, CancellationToken, ValueTask> action, CancellationToken token = default) Parameters Type Name Description IEnumerable<T> collection A collection to enumerate. Cannot be null. Func<T, CancellationToken, ValueTask> action An action to applied for each element. CancellationToken token The token that can be used to cancel the enumeration. Returns Type Description ValueTask The task representing asynchronous execution of this method. Type Parameters Name Description T Type of elements in the collection. Exceptions Type Condition OperationCanceledException The enumeration has been canceled. | Edit this page View Source ForEach<T>(IEnumerable<T>, Action<T>) Applies specified action to each collection element. Declaration public static void ForEach<T>(this IEnumerable<T> collection, Action<T> action) Parameters Type Name Description IEnumerable<T> collection A collection to enumerate. Cannot be null. Action<T> action An action to applied for each element. Type Parameters Name Description T Type of elements in the collection. | Edit this page View Source GetConsumer<T>(IProducerConsumerCollection<T>) Gets consumer of thread-safe concurrent collection. Declaration public static CollectionUtils.ConsumingEnumerable<T> GetConsumer<T>(this IProducerConsumerCollection<T> collection) Parameters Type Name Description IProducerConsumerCollection<T> collection The concurrent collection. Returns Type Description CollectionUtils.ConsumingEnumerable<T> The consumer in the form of enumerable collection. Type Parameters Name Description T The type of elements in the collection. | Edit this page View Source Prepend<T>(IEnumerable<T>, params T[]) Adds items to the beginning of collection. Declaration public static IEnumerable<T> Prepend<T>(this IEnumerable<T> collection, params T[] items) Parameters Type Name Description IEnumerable<T> collection The collection to be concatenated with the items. T[] items The items to be added to the beginning of the collection. Returns Type Description IEnumerable<T> The concatenated collection. Type Parameters Name Description T The type of items in the collection. | Edit this page View Source SequenceHashCode<T>(IEnumerable<T>, bool) Computes hash code for the sequence of objects. Declaration public static int SequenceHashCode<T>(this IEnumerable<T> sequence, bool salted = true) Parameters Type Name Description IEnumerable<T> sequence The sequence of elements. bool salted true to include randomized salt data into hashing; false to use data from memory only. Returns Type Description int The hash code computed from each element in the sequence. Type Parameters Name Description T Type of the elements in the sequence. | Edit this page View Source SkipNulls<T>(IEnumerable<T?>) Skip null values in the collection. Declaration public static IEnumerable<T> SkipNulls<T>(this IEnumerable<T?> collection) where T : class Parameters Type Name Description IEnumerable<T> collection A collection to check. Cannot be null. Returns Type Description IEnumerable<T> Modified lazy collection without null values. Type Parameters Name Description T Type of elements in the collection. | Edit this page View Source ToArray<T>(ICollection<T>) Converts collection into single-dimensional array. Declaration public static T[] ToArray<T>(ICollection<T> collection) Parameters Type Name Description ICollection<T> collection A collection to convert. Returns Type Description T[] Array of collection items. Type Parameters Name Description T Type of collection items. | Edit this page View Source ToArray<T>(IReadOnlyCollection<T>) Converts read-only collection into single-dimensional array. Declaration public static T[] ToArray<T>(IReadOnlyCollection<T> collection) Parameters Type Name Description IReadOnlyCollection<T> collection A collection to convert. Returns Type Description T[] Array of collection items. Type Parameters Name Description T Type of collection items. | Edit this page View Source ToString<T>(IEnumerable<T>, string, string) Concatenates each element from the collection into single string. Declaration public static string ToString<T>(this IEnumerable<T> collection, string delimiter, string ifEmpty = \"\") Parameters Type Name Description IEnumerable<T> collection Collection to convert. Cannot be null. string delimiter Delimiter between elements in the final string. string ifEmpty A string to be returned if collection has no elements. Returns Type Description string Converted collection into string. Type Parameters Name Description T Type of array elements."
  },
  "api/Yolu.Collections.Enumerator.LimitedEnumerator-1.html": {
    "href": "api/Yolu.Collections.Enumerator.LimitedEnumerator-1.html",
    "title": "Struct Enumerator.LimitedEnumerator<T> | Yolu",
    "keywords": "Struct Enumerator.LimitedEnumerator<T> Wrapped for the enumerator which is limited by count. Implements IEnumerator<T> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public struct Enumerator.LimitedEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable Type Parameters Name Description T The type of elements returned by enumerator. Properties | Edit this page View Source Current Gets the element in the collection at the current position of the enumerator. Declaration public readonly T Current { get; } Property Value Type Description T Methods | Edit this page View Source Dispose() Releases all resources associated with this enumerator. Declaration public void Dispose() | Edit this page View Source MoveNext() Advances the enumerator to the next element. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Edit this page View Source Reset() Sets the enumerator to its initial position. Declaration public readonly void Reset() Implements IEnumerator<T> IEnumerator IDisposable Extension Methods Enumerator.Limit<T>(IEnumerator<T>, int, bool) Enumerator.Skip<T>(IEnumerator<T>, int) Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.Enumerator.html": {
    "href": "api/Yolu.Collections.Enumerator.html",
    "title": "Class Enumerator | Yolu",
    "keywords": "Class Enumerator Various methods to work with classes implementing IEnumerable<T> interface. Inheritance object Enumerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public static class Enumerator Methods | Edit this page View Source Limit<T>(IEnumerator<T>, int, bool) Limits the number of the elements in the sequence. Declaration public static Enumerator.LimitedEnumerator<T> Limit<T>(this IEnumerator<T> enumerator, int count, bool leaveOpen = false) Parameters Type Name Description IEnumerator<T> enumerator The sequence of the elements. int count The maximum number of the elements in the returned sequence. bool leaveOpen false to dispose enumerator; otherwise, true. Returns Type Description Enumerator.LimitedEnumerator<T> The enumerator which is limited by count. Type Parameters Name Description T The type of items in the sequence. | Edit this page View Source Skip<T>(IEnumerator<T>, int) Bypasses a specified number of elements in a sequence. Declaration public static bool Skip<T>(this IEnumerator<T> enumerator, int count) Parameters Type Name Description IEnumerator<T> enumerator Enumerator to modify. Cannot be null. int count The number of elements to skip. Returns Type Description bool true, if current element is available; otherwise, false. Type Parameters Name Description T The type of the elements in the sequence. | Edit this page View Source Skip<TEnumerator, T>(ref TEnumerator, int) Bypasses a specified number of elements in a sequence. Declaration public static bool Skip<TEnumerator, T>(this ref TEnumerator enumerator, int count) where TEnumerator : struct, IEnumerator<T> Parameters Type Name Description TEnumerator enumerator Enumerator to modify. int count The number of elements to skip. Returns Type Description bool true, if current element is available; otherwise, false. Type Parameters Name Description TEnumerator The type of the sequence. T The type of the elements in the sequence. | Edit this page View Source ToEnumerator<T>(in ReadOnlySequence<T>) Gets enumerator over all elements in the sequence. Declaration public static IEnumerator<T> ToEnumerator<T>(in ReadOnlySequence<T> sequence) Parameters Type Name Description ReadOnlySequence<T> sequence A sequence of elements. Returns Type Description IEnumerator<T> The enumerator over all elements in the sequence. Type Parameters Name Description T The type of elements in the sequence. | Edit this page View Source ToEnumerator<T>(ReadOnlyMemory<T>) Gets enumerator over all elements in the memory. Declaration public static IEnumerator<T> ToEnumerator<T>(ReadOnlyMemory<T> memory) Parameters Type Name Description ReadOnlyMemory<T> memory The memory block to be converted. Returns Type Description IEnumerator<T> The enumerator over all elements in the memory. Type Parameters Name Description T The type of elements in the memory. See Also ToEnumerable<T>(ReadOnlyMemory<T>)"
  },
  "api/Yolu.Collections.FixedSizeQueue-1.html": {
    "href": "api/Yolu.Collections.FixedSizeQueue-1.html",
    "title": "Class FixedSizeQueue<T> | Yolu",
    "keywords": "Class FixedSizeQueue<T> Inheritance object FixedSizeQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public class FixedSizeQueue<T> Type Parameters Name Description T Constructors | Edit this page View Source FixedSizeQueue(int) Declaration public FixedSizeQueue(int size) Parameters Type Name Description int size Properties | Edit this page View Source Items Declaration public IReadOnlyCollection<T> Items { get; } Property Value Type Description IReadOnlyCollection<T> | Edit this page View Source Size Declaration public int Size { get; } Property Value Type Description int Methods | Edit this page View Source Dequeue() Declaration public T Dequeue() Returns Type Description T | Edit this page View Source Enqueue(T) Declaration public void Enqueue(T item) Parameters Type Name Description T item Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.IArray-1.html": {
    "href": "api/Yolu.Collections.IArray-1.html",
    "title": "Interface IArray<T> | Yolu",
    "keywords": "Interface IArray<T> Represents an array-like collection that provides read-only access to its elements. Inherited Members IReadOnlyList<T>.this[int] IReadOnlyCollection<T>.Count IEnumerable<T>.GetEnumerator() Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public interface IArray<out T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the array. Extension Methods CollectionUtils.Append<T>(IEnumerable<T>, params T[]) CollectionUtils.ElementAt<T>(IEnumerable<T>, int, out T) CollectionUtils.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, ValueTask>, CancellationToken) CollectionUtils.ForEach<T>(IEnumerable<T>, Action<T>) CollectionUtils.Prepend<T>(IEnumerable<T>, params T[]) CollectionUtils.SequenceHashCode<T>(IEnumerable<T>, bool) CollectionUtils.ToString<T>(IEnumerable<T>, string, string) WithIndexExtension.WithIndex<T>(IEnumerable<T>) CollectionUtils.Convert<TInput, TOutput>(IReadOnlyCollection<TInput>, Converter<TInput, TOutput>) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.IMutableArray-1.html": {
    "href": "api/Yolu.Collections.IMutableArray-1.html",
    "title": "Interface IMutableArray<T> | Yolu",
    "keywords": "Interface IMutableArray<T> Inherited Members IList<T>.IndexOf(T) IList<T>.Insert(int, T) IList<T>.RemoveAt(int) IList<T>.this[int] ICollection<T>.Add(T) ICollection<T>.Clear() ICollection<T>.Contains(T) ICollection<T>.CopyTo(T[], int) ICollection<T>.Remove(T) ICollection<T>.Count ICollection<T>.IsReadOnly IEnumerable<T>.GetEnumerator() Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public interface IMutableArray<T> : IList<T>, ICollection<T>, IArray<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Extension Methods CollectionUtils.AddAll<T>(ICollection<T>, IEnumerable<T>) CollectionUtils.Append<T>(IEnumerable<T>, params T[]) CollectionUtils.ElementAt<T>(IEnumerable<T>, int, out T) CollectionUtils.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, ValueTask>, CancellationToken) CollectionUtils.ForEach<T>(IEnumerable<T>, Action<T>) CollectionUtils.Prepend<T>(IEnumerable<T>, params T[]) CollectionUtils.SequenceHashCode<T>(IEnumerable<T>, bool) CollectionUtils.ToString<T>(IEnumerable<T>, string, string) WithIndexExtension.WithIndex<T>(IEnumerable<T>) CollectionUtils.Convert<TInput, TOutput>(IReadOnlyCollection<TInput>, Converter<TInput, TOutput>) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.MutableArray-1.html": {
    "href": "api/Yolu.Collections.MutableArray-1.html",
    "title": "Class MutableArray<T> | Yolu",
    "keywords": "Class MutableArray<T> Represents a mutable array collection and implements IMutableArray<T>. Inheritance object List<T> MutableArray<T> Implements IList ICollection IMutableArray<T> IList<T> ICollection<T> IArray<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[]) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Slice(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public class MutableArray<T> : List<T>, IList, ICollection, IMutableArray<T>, IList<T>, ICollection<T>, IArray<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the array. Constructors | Edit this page View Source MutableArray(IEnumerable<T>) Initializes a new instance of the MutableArray<T> class with the specified items. Declaration public MutableArray(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items The items to be added to the array. | Edit this page View Source MutableArray(int) Initializes a new instance of the MutableArray<T> class with the specified size. Declaration public MutableArray(int size = 0) Parameters Type Name Description int size The size of the array. | Edit this page View Source MutableArray(int, Func<int, T>) Initializes a new instance of the MutableArray<T> class with the specified size and factory function. Declaration public MutableArray(int size, Func<int, T> factory) Parameters Type Name Description int size The size of the array. Func<int, T> factory The factory function used to create elements of the array. Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IList ICollection IMutableArray<T> IList<T> ICollection<T> IArray<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionUtils.AddAll<T>(ICollection<T>, IEnumerable<T>) CollectionUtils.Append<T>(IEnumerable<T>, params T[]) CollectionUtils.ElementAt<T>(IEnumerable<T>, int, out T) CollectionUtils.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, ValueTask>, CancellationToken) CollectionUtils.ForEach<T>(IEnumerable<T>, Action<T>) CollectionUtils.Prepend<T>(IEnumerable<T>, params T[]) CollectionUtils.SequenceHashCode<T>(IEnumerable<T>, bool) CollectionUtils.ToString<T>(IEnumerable<T>, string, string) WithIndexExtension.WithIndex<T>(IEnumerable<T>) CollectionUtils.Convert<TInput, TOutput>(IReadOnlyCollection<TInput>, Converter<TInput, TOutput>) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.ReadOnlyCollectionView-2.html": {
    "href": "api/Yolu.Collections.ReadOnlyCollectionView-2.html",
    "title": "Struct ReadOnlyCollectionView<TInput, TOutput> | Yolu",
    "keywords": "Struct ReadOnlyCollectionView<TInput, TOutput> Represents lazily converted read-only collection. Implements IReadOnlyCollection<TOutput> IEnumerable<TOutput> IEnumerable IEquatable<ReadOnlyCollectionView<TInput, TOutput>> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public readonly struct ReadOnlyCollectionView<TInput, TOutput> : IReadOnlyCollection<TOutput>, IEnumerable<TOutput>, IEnumerable, IEquatable<ReadOnlyCollectionView<TInput, TOutput>> Type Parameters Name Description TInput Type of items in the source collection. TOutput Type of items in the converted collection. Remarks Initializes a new lazily converted view. Constructors | Edit this page View Source ReadOnlyCollectionView(IReadOnlyCollection<TInput>, Converter<TInput, TOutput>) Initializes a new lazily converted view. Declaration public ReadOnlyCollectionView(IReadOnlyCollection<TInput> collection, Converter<TInput, TOutput> mapper) Parameters Type Name Description IReadOnlyCollection<TInput> collection Read-only collection to convert. Converter<TInput, TOutput> mapper Collection items converter. | Edit this page View Source ReadOnlyCollectionView(IReadOnlyCollection<TInput>, Func<TInput, TOutput>) Represents lazily converted read-only collection. Declaration public ReadOnlyCollectionView(IReadOnlyCollection<TInput> collection, Func<TInput, TOutput> mapper) Parameters Type Name Description IReadOnlyCollection<TInput> collection Read-only collection to convert. Func<TInput, TOutput> mapper Collection items converter. Remarks Initializes a new lazily converted view. Properties | Edit this page View Source Count Count of items in the collection. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Equals(object?) Determines whether two converted collections are same. Declaration public override bool Equals(object? other) Parameters Type Name Description object other Other collection to compare. Returns Type Description bool true if this view wraps the same source collection and contains the same converter as other view; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source Equals(ReadOnlyCollectionView<TInput, TOutput>) Determines whether two converted collections are same. Declaration public bool Equals(ReadOnlyCollectionView<TInput, TOutput> other) Parameters Type Name Description ReadOnlyCollectionView<TInput, TOutput> other Other collection to compare. Returns Type Description bool true if this view wraps the same source collection and contains the same converter as other view; otherwise, false. | Edit this page View Source GetEnumerator() Returns enumerator over converted items. Declaration public IEnumerator<TOutput> GetEnumerator() Returns Type Description IEnumerator<TOutput> The enumerator over converted items. | Edit this page View Source GetHashCode() Returns hash code for the this view. Declaration public override int GetHashCode() Returns Type Description int The hash code of this view. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in ReadOnlyCollectionView<TInput, TOutput>, in ReadOnlyCollectionView<TInput, TOutput>) Determines whether two collections are same. Declaration public static bool operator ==(in ReadOnlyCollectionView<TInput, TOutput> first, in ReadOnlyCollectionView<TInput, TOutput> second) Parameters Type Name Description ReadOnlyCollectionView<TInput, TOutput> first The first collection to compare. ReadOnlyCollectionView<TInput, TOutput> second The second collection to compare. Returns Type Description bool true if the first view wraps the same source collection and contains the same converter as the second view; otherwise, false. | Edit this page View Source operator !=(in ReadOnlyCollectionView<TInput, TOutput>, in ReadOnlyCollectionView<TInput, TOutput>) Determines whether two collections are not same. Declaration public static bool operator !=(in ReadOnlyCollectionView<TInput, TOutput> first, in ReadOnlyCollectionView<TInput, TOutput> second) Parameters Type Name Description ReadOnlyCollectionView<TInput, TOutput> first The first collection to compare. ReadOnlyCollectionView<TInput, TOutput> second The second collection to compare. Returns Type Description bool true if the first view wraps the different source collection and contains the different converter as the second view; otherwise, false. Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable IEquatable<T> Extension Methods CollectionUtils.Append<T>(IEnumerable<T>, params T[]) CollectionUtils.ElementAt<T>(IEnumerable<T>, int, out T) CollectionUtils.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, ValueTask>, CancellationToken) CollectionUtils.ForEach<T>(IEnumerable<T>, Action<T>) CollectionUtils.Prepend<T>(IEnumerable<T>, params T[]) CollectionUtils.SequenceHashCode<T>(IEnumerable<T>, bool) CollectionUtils.ToString<T>(IEnumerable<T>, string, string) WithIndexExtension.WithIndex<T>(IEnumerable<T>) CollectionUtils.Convert<TInput, TOutput>(IReadOnlyCollection<TInput>, Converter<TInput, TOutput>) Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Collections.Span.html": {
    "href": "api/Yolu.Collections.Span.html",
    "title": "Class Span | Yolu",
    "keywords": "Class Span Provides extension methods for type Span<T> and ReadOnlySpan<T>. Inheritance object Span Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Collections Assembly: Yolu.dll Syntax public static class Span Methods | Edit this page View Source AsBytes<T>(T*) Converts contiguous memory identified by the specified pointer into Span<T>. Declaration public static Span<byte> AsBytes<T>(T* pointer) where T : unmanaged Parameters Type Name Description T* pointer The typed pointer. Returns Type Description Span<byte> The span of contiguous memory. Type Parameters Name Description T The type of the pointer. | Edit this page View Source AsBytes<T>(ref T) Converts contiguous memory identified by the specified pointer into Span<T>. Declaration public static Span<byte> AsBytes<T>(ref T value) where T : unmanaged Parameters Type Name Description T value The managed pointer. Returns Type Description Span<byte> The span of contiguous memory. Type Parameters Name Description T The type of the pointer. | Edit this page View Source AsReadOnlyBytes<T>(ref readonly T) Converts contiguous memory identified by the specified pointer into ReadOnlySpan<T>. Declaration public static ReadOnlySpan<byte> AsReadOnlyBytes<T>(ref readonly T value) where T : unmanaged Parameters Type Name Description T value The managed pointer. Returns Type Description ReadOnlySpan<byte> The span of contiguous memory. Type Parameters Name Description T The type of the pointer. | Edit this page View Source BitwiseCompare<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Compares content of the two memory blocks identified by the given spans. Declaration public static int BitwiseCompare<T>(this ReadOnlySpan<T> x, ReadOnlySpan<T> y) where T : unmanaged Parameters Type Name Description ReadOnlySpan<T> x The first memory span to compare. ReadOnlySpan<T> y The second array to compare. Returns Type Description int Comparison result. Type Parameters Name Description T The type of elements in the span. | Edit this page View Source BitwiseEquals<T>(ReadOnlySpan<T>, ReadOnlySpan<T>) Determines whether two memory blocks identified by the given spans contain the same set of elements. Declaration public static bool BitwiseEquals<T>(this ReadOnlySpan<T> x, ReadOnlySpan<T> y) where T : unmanaged Parameters Type Name Description ReadOnlySpan<T> x The first memory span to compare. ReadOnlySpan<T> y The second memory span to compare. Returns Type Description bool true, if both memory blocks are equal; otherwise, false. Type Parameters Name Description T The type of elements in the span. Remarks This method performs bitwise equality between each pair of elements. | Edit this page View Source Contravariance<T, TBase>(ReadOnlySpan<T>) Upcasts the span. Declaration public static ReadOnlySpan<TBase> Contravariance<T, TBase>(this ReadOnlySpan<T> span) where T : class?, TBase where TBase : class? Parameters Type Name Description ReadOnlySpan<T> span The span over elements. Returns Type Description ReadOnlySpan<TBase> The span pointing to the same memory as span. Type Parameters Name Description T The source type. TBase The target type. | Edit this page View Source CopyTo<T>(ReadOnlySpan<T>, Span<T>, out int) Copies the contents from the source span into a destination span. Declaration public static void CopyTo<T>(this ReadOnlySpan<T> source, Span<T> destination, out int writtenCount) Parameters Type Name Description ReadOnlySpan<T> source Source memory. Span<T> destination Destination memory. int writtenCount The number of copied elements. Type Parameters Name Description T The type of the elements in the span. | Edit this page View Source CopyTo<T>(Span<T>, Span<T>, out int) Copies the contents from the source span into a destination span. Declaration public static void CopyTo<T>(this Span<T> source, Span<T> destination, out int writtenCount) Parameters Type Name Description Span<T> source Source memory. Span<T> destination Destination memory. int writtenCount The number of copied elements. Type Parameters Name Description T The type of the elements in the span. | Edit this page View Source ForEach<T>(Span<T>, RefAction<T, int>) Iterates over elements of the span. Declaration public static void ForEach<T>(this Span<T> span, RefAction<T, int> action) Parameters Type Name Description Span<T> span The span to iterate. RefAction<T, int> action The action to be applied for each element of the span. Type Parameters Name Description T The type of the elements. | Edit this page View Source ForEach<T, TArg>(Span<T>, delegate*<ref T, TArg, void>, TArg) Iterates over elements of the span. Declaration public static void ForEach<T, TArg>(this Span<T> span, delegate*<ref T, TArg, void> action, TArg arg) Parameters Type Name Description Span<T> span The span to iterate. delegate*<ref T, TArg, void> action The action to be applied for each element of the span. TArg arg The argument to be passed to the action. Type Parameters Name Description T The type of the elements. TArg The type of the argument to be passed to the action. Exceptions Type Condition ArgumentNullException action is zero. | Edit this page View Source Initialize<T>(Span<T>) Initializes each element in the span. Declaration public static void Initialize<T>(this Span<T> span) where T : new() Parameters Type Name Description Span<T> span The span of elements. Type Parameters Name Description T The type of the element. Remarks This method has the same behavior as Initialize() and supports reference types. | Edit this page View Source Move<T>(Span<T>, Range, Index) Moves the range within the span to the specified index. Declaration public static void Move<T>(this Span<T> span, Range range, Index destinationIndex) Parameters Type Name Description Span<T> span The span of elements to modify. Range range The range of elements within span to move. Index destinationIndex The index of the element before which range of elements will be placed. Type Parameters Name Description T The type of the elements in the span. Exceptions Type Condition ArgumentOutOfRangeException destinationIndex is not a valid index within span. | Edit this page View Source TrimLength<T>(ReadOnlySpan<T>, int) Trims the span to specified length if it exceeds it. If length is less that maxLength then the original span returned. Declaration public static ReadOnlySpan<T> TrimLength<T>(this ReadOnlySpan<T> span, int maxLength) Parameters Type Name Description ReadOnlySpan<T> span A contiguous region of arbitrary memory. int maxLength Maximum length. Returns Type Description ReadOnlySpan<T> Trimmed span. Type Parameters Name Description T The type of items in the span. Exceptions Type Condition ArgumentOutOfRangeException maxLength is less than zero. | Edit this page View Source TrimLength<T>(Span<T>, int) Trims the span to specified length if it exceeds it. If length is less that maxLength then the original span returned. Declaration public static Span<T> TrimLength<T>(this Span<T> span, int maxLength) Parameters Type Name Description Span<T> span A contiguous region of arbitrary memory. int maxLength Maximum length. Returns Type Description Span<T> Trimmed span. Type Parameters Name Description T The type of items in the span. Exceptions Type Condition ArgumentOutOfRangeException maxLength is less than zero. | Edit this page View Source TrimLength<T>(Span<T>, int, out Span<T>) Trims the span to specified length if it exceeds it. If length is less that maxLength then the original span returned. Declaration public static Span<T> TrimLength<T>(this Span<T> span, int maxLength, out Span<T> rest) Parameters Type Name Description Span<T> span A contiguous region of arbitrary memory. int maxLength Maximum length. Span<T> rest The rest of span. Returns Type Description Span<T> Trimmed span. Type Parameters Name Description T The type of items in the span. Exceptions Type Condition ArgumentOutOfRangeException maxLength is less than zero."
  },
  "api/Yolu.Collections.html": {
    "href": "api/Yolu.Collections.html",
    "title": "Namespace Yolu.Collections | Yolu",
    "keywords": "Namespace Yolu.Collections Classes ArrayBuilder Array<T> Represents a generic immutable array collection. CollectionUtils Provides utility methods to work with collections. Enumerator Various methods to work with classes implementing IEnumerable<T> interface. FixedSizeQueue<T> MutableArray<T> Represents a mutable array collection and implements IMutableArray<T>. Span Provides extension methods for type Span<T> and ReadOnlySpan<T>. Structs Array<T>.Enumerator An array enumerator. CollectionUtils.ConsumingEnumerable<T> Represents a wrapped for method TryTake(out T) in the form of enumerable collection. CollectionUtils.ConsumingEnumerable<T>.Enumerator Represents consumer enumerator. Enumerator.LimitedEnumerator<T> Wrapped for the enumerator which is limited by count. ReadOnlyCollectionView<TInput, TOutput> Represents lazily converted read-only collection. Interfaces IArray<T> Represents an array-like collection that provides read-only access to its elements. IMutableArray<T>"
  },
  "api/Yolu.DateTimes.DateOnlyExtensions.html": {
    "href": "api/Yolu.DateTimes.DateOnlyExtensions.html",
    "title": "Class DateOnlyExtensions | Yolu",
    "keywords": "Class DateOnlyExtensions Static class containing Fluent DateOnly extension methods. Inheritance object DateOnlyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.DateTimes Assembly: Yolu.dll Syntax public static class DateOnlyExtensions Methods | Edit this page View Source AddBusinessDays(DateOnly, int) Adds the given number of business days to the DateOnly. Declaration [Pure] public static DateOnly AddBusinessDays(this DateOnly current, int days) Parameters Type Name Description DateOnly current The date to be changed. int days Number of business days to be added. Returns Type Description DateOnly A DateOnly increased by a given number of business days. | Edit this page View Source DaysInMonth(DateOnly) Gets the number of days in the month of the specified DateOnly. Declaration public static int DaysInMonth(this DateOnly date) Parameters Type Name Description DateOnly date The DateOnly to get the number of days in the month for. Returns Type Description int The number of days in the month of the specified DateOnly. | Edit this page View Source DaysInMonth(int, int) Gets the number of days in the specified month of the specified year. Declaration public static int DaysInMonth(int year, int month) Parameters Type Name Description int year The year. int month The month. Returns Type Description int The number of days in the specified month of the specified year. | Edit this page View Source DecreaseTime(DateOnly, TimeSpan) Decreases the DateOnly object with given TimeSpan value. Declaration [Pure] public static DateTime DecreaseTime(this DateOnly startDate, TimeSpan toSubtract) Parameters Type Name Description DateOnly startDate TimeSpan toSubtract Returns Type Description DateTime | Edit this page View Source EndOfDay(DateOnly) Returns the very end of the given day (the last millisecond of the last hour for the given DateOnly). Declaration [Pure] public static DateTime EndOfDay(this DateOnly date) Parameters Type Name Description DateOnly date Returns Type Description DateTime | Edit this page View Source EndOfDay(DateOnly, int) Returns the timezone-adjusted very end of the given day (the last millisecond of the last hour for the given DateOnly). Declaration [Pure] public static DateTime EndOfDay(this DateOnly date, int timeZoneOffset) Parameters Type Name Description DateOnly date int timeZoneOffset Returns Type Description DateTime | Edit this page View Source FirstDayOfMonth(DateOnly) Sets the day of the DateOnly to the first day in that month. Declaration [Pure] public static DateOnly FirstDayOfMonth(this DateOnly current) Parameters Type Name Description DateOnly current The current DateOnly to be changed. Returns Type Description DateOnly given DateOnly with the day part set to the first day in that month. | Edit this page View Source FirstDayOfQuarter(DateOnly) Sets the day of the DateOnly to the first day in that calendar quarter. credit to http://www.devcurry.com/2009/05/find-first-and-last-day-of-current.html Declaration [Pure] public static DateOnly FirstDayOfQuarter(this DateOnly current) Parameters Type Name Description DateOnly current Returns Type Description DateOnly given DateOnly with the day part set to the first day in the quarter. | Edit this page View Source FirstDayOfWeek(DateOnly) Returns a DateOnly adjusted to the beginning of the week. Declaration [Pure] public static DateOnly FirstDayOfWeek(this DateOnly DateOnly) Parameters Type Name Description DateOnly DateOnly The DateOnly to adjust Returns Type Description DateOnly A DateOnly instance adjusted to the beginning of the current week Remarks the beginning of the week is controlled by the current Culture | Edit this page View Source FirstDayOfYear(DateOnly) Returns the first day of the year keeping the time component intact. Eg, 2011-02-04T06:40:20.005 => 2011-01-01T06:40:20.005 Declaration [Pure] public static DateOnly FirstDayOfYear(this DateOnly current) Parameters Type Name Description DateOnly current The DateOnly to adjust Returns Type Description DateOnly | Edit this page View Source IncreaseTime(DateOnly, TimeSpan) Increases the DateOnly object with given TimeSpan value. Declaration [Pure] public static DateTime IncreaseTime(this DateOnly startDate, TimeSpan toAdd) Parameters Type Name Description DateOnly startDate TimeSpan toAdd Returns Type Description DateTime | Edit this page View Source IsAfter(DateOnly, DateOnly) Determines whether the specified DateOnly value is After then current value. Declaration [Pure] public static bool IsAfter(this DateOnly current, DateOnly toCompareWith) Parameters Type Name Description DateOnly current The current value. DateOnly toCompareWith Value to compare with. Returns Type Description bool true if the specified current is after; otherwise, false. | Edit this page View Source IsBefore(DateOnly, DateOnly) Determines whether the specified DateOnly is before then current value. Declaration [Pure] public static bool IsBefore(this DateOnly current, DateOnly toCompareWith) Parameters Type Name Description DateOnly current The current value. DateOnly toCompareWith Value to compare with. Returns Type Description bool true if the specified current is before; otherwise, false. | Edit this page View Source IsInFuture(DateOnly) Determine if a DateOnly is in the future. Declaration [Pure] public static bool IsInFuture(this DateOnly DateOnly) Parameters Type Name Description DateOnly DateOnly The date to be checked. Returns Type Description bool true if DateOnly is in the future; otherwise false. | Edit this page View Source IsInPast(DateOnly) Determine if a DateOnly is in the past. Declaration [Pure] public static bool IsInPast(this DateOnly DateOnly) Parameters Type Name Description DateOnly DateOnly The date to be checked. Returns Type Description bool true if DateOnly is in the past; otherwise false. | Edit this page View Source LastDayOfMonth(DateOnly) Sets the day of the DateOnly to the last day in that month. Declaration [Pure] public static DateOnly LastDayOfMonth(this DateOnly current) Parameters Type Name Description DateOnly current The current DateOnly to be changed. Returns Type Description DateOnly given DateOnly with the day part set to the last day in that month. | Edit this page View Source LastDayOfQuarter(DateOnly) Sets the day of the DateOnly to the last day in that calendar quarter. credit to http://www.devcurry.com/2009/05/find-first-and-last-day-of-current.html Declaration [Pure] public static DateOnly LastDayOfQuarter(this DateOnly current) Parameters Type Name Description DateOnly current Returns Type Description DateOnly given DateOnly with the day part set to the last day in the quarter. | Edit this page View Source LastDayOfWeek(DateOnly) Returns the last day of the week keeping the time component intact. Eg, 2011-12-24T06:40:20.005 => 2011-12-25T06:40:20.005 Declaration [Pure] public static DateOnly LastDayOfWeek(this DateOnly current) Parameters Type Name Description DateOnly current The DateOnly to adjust Returns Type Description DateOnly | Edit this page View Source LastDayOfYear(DateOnly) Returns the last day of the year keeping the time component intact. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T06:40:20.005 Declaration [Pure] public static DateOnly LastDayOfYear(this DateOnly current) Parameters Type Name Description DateOnly current The DateOnly to adjust Returns Type Description DateOnly | Edit this page View Source Next(DateOnly, DayOfWeek) Returns first next occurrence of specified DayOfWeek. Declaration [Pure] public static DateOnly Next(this DateOnly start, DayOfWeek day) Parameters Type Name Description DateOnly start DayOfWeek day Returns Type Description DateOnly | Edit this page View Source NextDay(DateOnly) Returns DateOnly increased by 24 hours ie Next Day. Declaration [Pure] public static DateOnly NextDay(this DateOnly start) Parameters Type Name Description DateOnly start Returns Type Description DateOnly | Edit this page View Source NextMonth(DateOnly) Returns the next month keeping the time component intact. Eg, 2012-12-05T06:40:20.005 => 2013-01-05T06:40:20.005 If the next month doesn't have that many days the last day of the next month is used. Eg, 2013-01-31T06:40:20.005 => 2013-02-28T06:40:20.005 Declaration [Pure] public static DateOnly NextMonth(this DateOnly current) Parameters Type Name Description DateOnly current The DateOnly to adjust Returns Type Description DateOnly | Edit this page View Source NextYear(DateOnly) Returns the same date (same Day, Month, Hour, Minute, Second etc) in the next calendar year. If that day does not exist in next year in same month, number of missing days is added to the last day in same month next year. Declaration [Pure] public static DateOnly NextYear(this DateOnly start) Parameters Type Name Description DateOnly start Returns Type Description DateOnly | Edit this page View Source Noon(DateOnly) Returns original DateOnly value with time part set to Noon (12:00:00h). Declaration [Pure] public static DateTime Noon(this DateOnly value) Parameters Type Name Description DateOnly value The DateOnly find Noon for. Returns Type Description DateTime A DateOnly value with time part set to Noon (12:00:00h). | Edit this page View Source Previous(DateOnly, DayOfWeek) Returns first next occurrence of specified DayOfWeek. Declaration [Pure] public static DateOnly Previous(this DateOnly start, DayOfWeek day) Parameters Type Name Description DateOnly start DayOfWeek day Returns Type Description DateOnly | Edit this page View Source PreviousDay(DateOnly) Returns DateOnly decreased by 24h period ie Previous Day. Declaration [Pure] public static DateOnly PreviousDay(this DateOnly start) Parameters Type Name Description DateOnly start Returns Type Description DateOnly | Edit this page View Source PreviousMonth(DateOnly) Returns the previous month keeping the time component intact. Eg, 2010-01-20T06:40:20.005 => 2009-12-20T06:40:20.005 If the previous month doesn't have that many days the last day of the previous month is used. Eg, 2009-03-31T06:40:20.005 => 2009-02-28T06:40:20.005 Declaration [Pure] public static DateOnly PreviousMonth(this DateOnly current) Parameters Type Name Description DateOnly current The DateOnly to adjust Returns Type Description DateOnly | Edit this page View Source PreviousYear(DateOnly) Returns the same date (same Day, Month, Hour, Minute, Second etc) in the previous calendar year. If that day does not exist in previous year in same month, number of missing days is added to the last day in same month previous year. Declaration [Pure] public static DateOnly PreviousYear(this DateOnly start) Parameters Type Name Description DateOnly start Returns Type Description DateOnly | Edit this page View Source SameDay(DateOnly, DateOnly) Determines whether the specified DateOnly value is exactly the same day (day + month + year) then current Declaration [Pure] public static bool SameDay(this DateOnly current, DateOnly date) Parameters Type Name Description DateOnly current The current value DateOnly date Value to compare with Returns Type Description bool true if the specified date is exactly the same year then current; otherwise, false. | Edit this page View Source SameMonth(DateOnly, DateOnly) Determines whether the specified DateOnly value is exactly the same month (month + year) then current. Eg, 2015-12-01 and 2014-12-01 => False Declaration [Pure] public static bool SameMonth(this DateOnly current, DateOnly date) Parameters Type Name Description DateOnly current The current value DateOnly date Value to compare with Returns Type Description bool true if the specified date is exactly the same month and year then current; otherwise, false. | Edit this page View Source SameYear(DateOnly, DateOnly) Determines whether the specified DateOnly value is exactly the same year then current. Eg, 2015-12-01 and 2015-01-01 => True Declaration [Pure] public static bool SameYear(this DateOnly current, DateOnly date) Parameters Type Name Description DateOnly current The current value DateOnly date Value to compare with Returns Type Description bool true if the specified date is exactly the same date then current; otherwise, false. | Edit this page View Source SetDate(DateOnly, int) Returns DateOnly with changed Year part. Declaration [Pure] public static DateOnly SetDate(this DateOnly value, int year) Parameters Type Name Description DateOnly value int year Returns Type Description DateOnly | Edit this page View Source SetDate(DateOnly, int, int) Returns DateOnly with changed Year and Month part. Declaration [Pure] public static DateOnly SetDate(this DateOnly value, int year, int month) Parameters Type Name Description DateOnly value int year int month Returns Type Description DateOnly | Edit this page View Source SetDate(DateOnly, int, int, int) Returns DateOnly with changed Year, Month and Day part. Declaration [Pure] public static DateOnly SetDate(this DateOnly value, int year, int month, int day) Parameters Type Name Description DateOnly value int year int month int day Returns Type Description DateOnly | Edit this page View Source SetDay(DateOnly, int) Returns DateOnly with changed Day part. Declaration [Pure] public static DateOnly SetDay(this DateOnly value, int day) Parameters Type Name Description DateOnly value int day Returns Type Description DateOnly | Edit this page View Source SetMonth(DateOnly, int) Returns DateOnly with changed Month part. Declaration [Pure] public static DateOnly SetMonth(this DateOnly value, int month) Parameters Type Name Description DateOnly value int month Returns Type Description DateOnly | Edit this page View Source SetTime(DateOnly, int) Returns the original DateOnly with Hour part changed to supplied hour parameter. Declaration [Pure] public static DateTime SetTime(this DateOnly originalDate, int hour) Parameters Type Name Description DateOnly originalDate int hour Returns Type Description DateTime | Edit this page View Source SetTime(DateOnly, int, int) Returns the original DateOnly with Hour and Minute parts changed to supplied hour and minute parameters. Declaration [Pure] public static DateTime SetTime(this DateOnly originalDate, int hour, int minute) Parameters Type Name Description DateOnly originalDate int hour int minute Returns Type Description DateTime | Edit this page View Source SetTime(DateOnly, int, int, int) Returns the original DateOnly with Hour, Minute and Second parts changed to supplied hour, minute and second parameters. Declaration [Pure] public static DateTime SetTime(this DateOnly originalDate, int hour, int minute, int second) Parameters Type Name Description DateOnly originalDate int hour int minute int second Returns Type Description DateTime | Edit this page View Source SetTime(DateOnly, int, int, int, int) Returns the original DateOnly with Hour, Minute, Second and Millisecond parts changed to supplied hour, minute, second and millisecond parameters. Declaration [Pure] public static DateTime SetTime(this DateOnly originalDate, int hour, int minute, int second, int millisecond) Parameters Type Name Description DateOnly originalDate int hour int minute int second int millisecond Returns Type Description DateTime | Edit this page View Source SetTime(DateOnly, TimeOnly) Returns the original DateOnly with TimeOnly parameters. Declaration [Pure] public static DateTime SetTime(this DateOnly originalDate, TimeOnly time) Parameters Type Name Description DateOnly originalDate TimeOnly time Returns Type Description DateTime | Edit this page View Source SetYear(DateOnly, int) Returns DateOnly with changed Year part. Declaration [Pure] public static DateOnly SetYear(this DateOnly value, int year) Parameters Type Name Description DateOnly value int year Returns Type Description DateOnly | Edit this page View Source StartOfWeek(DateOnly) Obsolete. This method has been renamed to FirstDayOfWeek to be more consistent with existing conventions. Declaration [Obsolete(\"This method has been renamed to FirstDayOfWeek to be more consistent with existing conventions.\")] [Pure] public static DateOnly StartOfWeek(this DateOnly DateOnly) Parameters Type Name Description DateOnly DateOnly Returns Type Description DateOnly | Edit this page View Source SubtractBusinessDays(DateOnly, int) Subtracts the given number of business days to the DateOnly. Declaration [Pure] public static DateOnly SubtractBusinessDays(this DateOnly current, int days) Parameters Type Name Description DateOnly current The date to be changed. int days Number of business days to be subtracted. Returns Type Description DateOnly A DateOnly increased by a given number of business days. | Edit this page View Source WeekAfter(DateOnly) Increases supplied DateOnly for 7 days ie returns the Next Week. Declaration [Pure] public static DateOnly WeekAfter(this DateOnly start) Parameters Type Name Description DateOnly start Returns Type Description DateOnly | Edit this page View Source WeekEarlier(DateOnly) Decreases supplied DateOnly for 7 days ie returns the Previous Week. Declaration [Pure] public static DateOnly WeekEarlier(this DateOnly start) Parameters Type Name Description DateOnly start Returns Type Description DateOnly"
  },
  "api/Yolu.DateTimes.DateTimeExtensions.html": {
    "href": "api/Yolu.DateTimes.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | Yolu",
    "keywords": "Class DateTimeExtensions Static class containing Fluent DateTime extension methods. Inheritance object DateTimeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.DateTimes Assembly: Yolu.dll Syntax public static class DateTimeExtensions Methods | Edit this page View Source AddBusinessDays(DateTime, int) Adds the given number of business days to the DateTime. Declaration [Pure] public static DateTime AddBusinessDays(this DateTime current, int days) Parameters Type Name Description DateTime current The date to be changed. int days Number of business days to be added. Returns Type Description DateTime A DateTime increased by a given number of business days. | Edit this page View Source Ago(TimeSpan) Subtracts given TimeSpan from current date (Now) and returns resulting DateTime in the past. Declaration [Pure] public static DateTime Ago(this TimeSpan from) Parameters Type Name Description TimeSpan from Returns Type Description DateTime | Edit this page View Source Ago(TimeSpan, DateTime) Subtracts given TimeSpan from originalValueDateTime and returns resulting DateTime in the past. Declaration [Pure] public static DateTime Ago(this TimeSpan from, DateTime originalValue) Parameters Type Name Description TimeSpan from DateTime originalValue Returns Type Description DateTime | Edit this page View Source At(DateTime, int, int) Returns the given DateTime with hour and minutes set At given values. Declaration [Pure] public static DateTime At(this DateTime current, int hour, int minute) Parameters Type Name Description DateTime current The current DateTime to be changed. int hour The hour to set time to. int minute The minute to set time to. Returns Type Description DateTime DateTime with hour and minute set to given values. | Edit this page View Source At(DateTime, int, int, int) Returns the given DateTime with hour and minutes and seconds set At given values. Declaration [Pure] public static DateTime At(this DateTime current, int hour, int minute, int second) Parameters Type Name Description DateTime current The current DateTime to be changed. int hour The hour to set time to. int minute The minute to set time to. int second The second to set time to. Returns Type Description DateTime DateTime with hour and minutes and seconds set to given values. | Edit this page View Source At(DateTime, int, int, int, int) Returns the given DateTime with hour and minutes and seconds and milliseconds set At given values. Declaration [Pure] public static DateTime At(this DateTime current, int hour, int minute, int second, int milliseconds) Parameters Type Name Description DateTime current The current DateTime to be changed. int hour The hour to set time to. int minute The minute to set time to. int second The second to set time to. int milliseconds The milliseconds to set time to. Returns Type Description DateTime DateTime with hour and minutes and seconds set to given values. | Edit this page View Source Before(TimeSpan, DateTime) Subtracts given TimeSpan from originalValueDateTime and returns resulting DateTime in the past. Declaration [Pure] public static DateTime Before(this TimeSpan from, DateTime originalValue) Parameters Type Name Description TimeSpan from DateTime originalValue Returns Type Description DateTime | Edit this page View Source BeginningOfDay(DateTime) Returns the Start of the given day (the first millisecond of the given DateTime). Declaration [Pure] public static DateTime BeginningOfDay(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source BeginningOfDay(DateTime, int) Returns the timezone-adjusted Start of the given day (the first millisecond of the given DateTime). Declaration [Pure] public static DateTime BeginningOfDay(this DateTime date, int timezoneOffset) Parameters Type Name Description DateTime date int timezoneOffset Returns Type Description DateTime | Edit this page View Source BeginningOfMonth(DateTime) Returns the Start day of the month changing the time to the very start of the day. Eg, 2011-12-24T06:40:20.005 => 2011-12-01T00:00:00.000. DateTime Declaration [Pure] public static DateTime BeginningOfMonth(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source BeginningOfMonth(DateTime, int) Returns the Start day of the month changing the time to the very start of the day with timezone-adjusted. Eg, 2011-12-24T06:40:20.005 => 2011-12-01T00:00:00.000. DateTime Declaration [Pure] public static DateTime BeginningOfMonth(this DateTime date, int timezoneOffset) Parameters Type Name Description DateTime date int timezoneOffset Returns Type Description DateTime | Edit this page View Source BeginningOfQuarter(DateTime) Returns the Start day of the quarter changing the time to the very start of the day. Eg, 2011-12-24T06:40:20.005 => 2011-10-01T00:00:00.000. DateTime Declaration [Pure] public static DateTime BeginningOfQuarter(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source BeginningOfQuarter(DateTime, int) Returns the Start day of the quarter changing the time to the very start of the day with timezone-adjusted. Eg, 2011-12-24T06:40:20.005 => 2011-10-01T00:00:00.000. DateTime Declaration [Pure] public static DateTime BeginningOfQuarter(this DateTime date, int timezoneOffset) Parameters Type Name Description DateTime date int timezoneOffset Returns Type Description DateTime | Edit this page View Source BeginningOfWeek(DateTime) Returns the Start day of the week changing the time to the very start of the day. Eg, 2011-12-24T06:40:20.005 => 2011-12-19T00:00:00.000. DateTime Declaration [Pure] public static DateTime BeginningOfWeek(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source BeginningOfWeek(DateTime, int) Returns the Start day of the week changing the time to the very start of the day with timezone-adjusted. Eg, 2011-12-24T06:40:20.005 => 2011-12-19T00:00:00.000. DateTime Declaration [Pure] public static DateTime BeginningOfWeek(this DateTime date, int timezoneOffset) Parameters Type Name Description DateTime date int timezoneOffset Returns Type Description DateTime | Edit this page View Source BeginningOfYear(DateTime) Returns the Start day of the year changing the time to the very start of the day. Eg, 2011-12-24T06:40:20.005 => 2011-01-01T00:00:00.000. DateTime Declaration [Pure] public static DateTime BeginningOfYear(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source BeginningOfYear(DateTime, int) Returns the Start day of the year changing the time to the very start of the day with timezone-adjusted. Eg, 2011-12-24T06:40:20.005 => 2011-01-01T00:00:00.000. DateTime Declaration [Pure] public static DateTime BeginningOfYear(this DateTime date, int timezoneOffset) Parameters Type Name Description DateTime date int timezoneOffset Returns Type Description DateTime | Edit this page View Source DateAndTimeOnly(DateTime) Returns the date and time components of the specified DateTime as a tuple of DateOnly and TimeOnly objects. Declaration public static (DateOnly Date, TimeOnly Time) DateAndTimeOnly(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The DateTime object. Returns Type Description (DateOnly Date, TimeOnly Time) A tuple of DateOnly and TimeOnly objects representing the date and time components of the dateTime. | Edit this page View Source DecreaseTime(DateTime, TimeSpan) Decreases the DateTime object with given TimeSpan value. Declaration [Pure] public static DateTime DecreaseTime(this DateTime startDate, TimeSpan toSubtract) Parameters Type Name Description DateTime startDate TimeSpan toSubtract Returns Type Description DateTime | Edit this page View Source EndOfDay(DateTime) Returns the very end of the given day (the last millisecond of the last hour for the given DateTime). Declaration [Pure] public static DateTime EndOfDay(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source EndOfDay(DateTime, int) Returns the timezone-adjusted very end of the given day (the last millisecond of the last hour for the given DateTime). Declaration [Pure] public static DateTime EndOfDay(this DateTime date, int timeZoneOffset) Parameters Type Name Description DateTime date int timeZoneOffset Returns Type Description DateTime | Edit this page View Source EndOfMonth(DateTime) Returns the last day of the month changing the time to the very end of the day. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T23:59:59.999 Declaration [Pure] public static DateTime EndOfMonth(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source EndOfMonth(DateTime, int) Returns the last day of the month changing the time to the very end of the day with timezone-adjusted. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T23:59:59.999 Declaration [Pure] public static DateTime EndOfMonth(this DateTime date, int timeZoneOffset) Parameters Type Name Description DateTime date int timeZoneOffset Returns Type Description DateTime | Edit this page View Source EndOfQuarter(DateTime) Returns the last day of the quarter changing the time to the very end of the day. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T23:59:59.999 Declaration [Pure] public static DateTime EndOfQuarter(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source EndOfQuarter(DateTime, int) Returns the last day of the quarter changing the time to the very end of the day with timezone-adjusted. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T23:59:59.999 Declaration [Pure] public static DateTime EndOfQuarter(this DateTime date, int timeZoneOffset) Parameters Type Name Description DateTime date int timeZoneOffset Returns Type Description DateTime | Edit this page View Source EndOfWeek(DateTime) Returns the last day of the week changing the time to the very end of the day. Eg, 2011-12-24T06:40:20.005 => 2011-12-25T23:59:59.999 Declaration [Pure] public static DateTime EndOfWeek(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source EndOfWeek(DateTime, int) Returns the last day of the week changing the time to the very end of the day with timezone-adjusted. Eg, 2011-12-24T06:40:20.005 => 2011-12-25T23:59:59.999 Declaration [Pure] public static DateTime EndOfWeek(this DateTime date, int timeZoneOffset) Parameters Type Name Description DateTime date int timeZoneOffset Returns Type Description DateTime | Edit this page View Source EndOfYear(DateTime) Returns the last day of the year changing the time to the very end of the day. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T23:59:59.999 Declaration [Pure] public static DateTime EndOfYear(this DateTime date) Parameters Type Name Description DateTime date Returns Type Description DateTime | Edit this page View Source EndOfYear(DateTime, int) Returns the last day of the year changing the time to the very end of the day with timezone-adjusted. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T23:59:59.999 Declaration [Pure] public static DateTime EndOfYear(this DateTime date, int timeZoneOffset) Parameters Type Name Description DateTime date int timeZoneOffset Returns Type Description DateTime | Edit this page View Source FirstDayOfMonth(DateTime) Sets the day of the DateTime to the first day in that month. Declaration [Pure] public static DateTime FirstDayOfMonth(this DateTime current) Parameters Type Name Description DateTime current The current DateTime to be changed. Returns Type Description DateTime given DateTime with the day part set to the first day in that month. | Edit this page View Source FirstDayOfQuarter(DateTime) Sets the day of the DateTime to the first day in that calendar quarter. credit to http://www.devcurry.com/2009/05/find-first-and-last-day-of-current.html Declaration [Pure] public static DateTime FirstDayOfQuarter(this DateTime current) Parameters Type Name Description DateTime current Returns Type Description DateTime given DateTime with the day part set to the first day in the quarter. | Edit this page View Source FirstDayOfWeek(DateTime) Returns a DateTime adjusted to the beginning of the week. Declaration [Pure] public static DateTime FirstDayOfWeek(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The DateTime to adjust Returns Type Description DateTime A DateTime instance adjusted to the beginning of the current week Remarks the beginning of the week is controlled by the current Culture | Edit this page View Source FirstDayOfYear(DateTime) Returns the first day of the year keeping the time component intact. Eg, 2011-02-04T06:40:20.005 => 2011-01-01T06:40:20.005 Declaration [Pure] public static DateTime FirstDayOfYear(this DateTime current) Parameters Type Name Description DateTime current The DateTime to adjust Returns Type Description DateTime | Edit this page View Source From(TimeSpan, DateTime) Adds given TimeSpan to supplied originalValueDateTime and returns resulting DateTime in the future. Declaration [Pure] public static DateTime From(this TimeSpan from, DateTime originalValue) Parameters Type Name Description TimeSpan from DateTime originalValue Returns Type Description DateTime | Edit this page View Source FromNow(TimeSpan) Adds given TimeSpan to current Now and returns resulting DateTime in the future. Declaration [Pure] public static DateTime FromNow(this TimeSpan from) Parameters Type Name Description TimeSpan from Returns Type Description DateTime | Edit this page View Source GetDateOnly(DateTime) Converts a DateTime to a DateOnly. Declaration public static DateOnly GetDateOnly(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The DateTime to convert. Returns Type Description DateOnly The converted DateOnly. | Edit this page View Source GetTimeOnly(DateTime) Returns the time component of the specified DateTime as a TimeOnly object. Declaration public static TimeOnly GetTimeOnly(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The DateTime object. Returns Type Description TimeOnly A TimeOnly object representing the time component of the dateTime. | Edit this page View Source IncreaseTime(DateTime, TimeSpan) Increases the DateTime object with given TimeSpan value. Declaration [Pure] public static DateTime IncreaseTime(this DateTime startDate, TimeSpan toAdd) Parameters Type Name Description DateTime startDate TimeSpan toAdd Returns Type Description DateTime | Edit this page View Source IsAfter(DateTime, DateTime) Determines whether the specified DateTime value is After then current value. Declaration [Pure] public static bool IsAfter(this DateTime current, DateTime toCompareWith) Parameters Type Name Description DateTime current The current value. DateTime toCompareWith Value to compare with. Returns Type Description bool true if the specified current is after; otherwise, false. | Edit this page View Source IsBefore(DateTime, DateTime) Determines whether the specified DateTime is before then current value. Declaration [Pure] public static bool IsBefore(this DateTime current, DateTime toCompareWith) Parameters Type Name Description DateTime current The current value. DateTime toCompareWith Value to compare with. Returns Type Description bool true if the specified current is before; otherwise, false. | Edit this page View Source IsInFuture(DateTime) Determine if a DateTime is in the future. Declaration [Pure] public static bool IsInFuture(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The date to be checked. Returns Type Description bool true if dateTime is in the future; otherwise false. | Edit this page View Source IsInPast(DateTime) Determine if a DateTime is in the past. Declaration [Pure] public static bool IsInPast(this DateTime dateTime) Parameters Type Name Description DateTime dateTime The date to be checked. Returns Type Description bool true if dateTime is in the past; otherwise false. | Edit this page View Source LastDayOfMonth(DateTime) Sets the day of the DateTime to the last day in that month. Declaration [Pure] public static DateTime LastDayOfMonth(this DateTime current) Parameters Type Name Description DateTime current The current DateTime to be changed. Returns Type Description DateTime given DateTime with the day part set to the last day in that month. | Edit this page View Source LastDayOfQuarter(DateTime) Sets the day of the DateTime to the last day in that calendar quarter. credit to http://www.devcurry.com/2009/05/find-first-and-last-day-of-current.html Declaration [Pure] public static DateTime LastDayOfQuarter(this DateTime current) Parameters Type Name Description DateTime current Returns Type Description DateTime given DateTime with the day part set to the last day in the quarter. | Edit this page View Source LastDayOfWeek(DateTime) Returns the last day of the week keeping the time component intact. Eg, 2011-12-24T06:40:20.005 => 2011-12-25T06:40:20.005 Declaration [Pure] public static DateTime LastDayOfWeek(this DateTime current) Parameters Type Name Description DateTime current The DateTime to adjust Returns Type Description DateTime | Edit this page View Source LastDayOfYear(DateTime) Returns the last day of the year keeping the time component intact. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T06:40:20.005 Declaration [Pure] public static DateTime LastDayOfYear(this DateTime current) Parameters Type Name Description DateTime current The DateTime to adjust Returns Type Description DateTime | Edit this page View Source Midnight(DateTime) Returns original DateTime value with time part set to midnight (alias for BeginningOfDay(DateTime) method). Declaration [Pure] public static DateTime Midnight(this DateTime value) Parameters Type Name Description DateTime value Returns Type Description DateTime | Edit this page View Source Next(DateTime, DayOfWeek) Returns first next occurrence of specified DayOfWeek. Declaration [Pure] public static DateTime Next(this DateTime start, DayOfWeek day) Parameters Type Name Description DateTime start DayOfWeek day Returns Type Description DateTime | Edit this page View Source NextDay(DateTime) Returns DateTime increased by 24 hours ie Next Day. Declaration [Pure] public static DateTime NextDay(this DateTime start) Parameters Type Name Description DateTime start Returns Type Description DateTime | Edit this page View Source NextMonth(DateTime) Returns the next month keeping the time component intact. Eg, 2012-12-05T06:40:20.005 => 2013-01-05T06:40:20.005 If the next month doesn't have that many days the last day of the next month is used. Eg, 2013-01-31T06:40:20.005 => 2013-02-28T06:40:20.005 Declaration [Pure] public static DateTime NextMonth(this DateTime current) Parameters Type Name Description DateTime current The DateTime to adjust Returns Type Description DateTime | Edit this page View Source NextYear(DateTime) Returns the same date (same Day, Month, Hour, Minute, Second etc) in the next calendar year. If that day does not exist in next year in same month, number of missing days is added to the last day in same month next year. Declaration [Pure] public static DateTime NextYear(this DateTime start) Parameters Type Name Description DateTime start Returns Type Description DateTime | Edit this page View Source Noon(DateTime) Returns original DateTime value with time part set to Noon (12:00:00h). Declaration [Pure] public static DateTime Noon(this DateTime value) Parameters Type Name Description DateTime value The DateTime find Noon for. Returns Type Description DateTime A DateTime value with time part set to Noon (12:00:00h). | Edit this page View Source Previous(DateTime, DayOfWeek) Returns first next occurrence of specified DayOfWeek. Declaration [Pure] public static DateTime Previous(this DateTime start, DayOfWeek day) Parameters Type Name Description DateTime start DayOfWeek day Returns Type Description DateTime | Edit this page View Source PreviousDay(DateTime) Returns DateTime decreased by 24h period ie Previous Day. Declaration [Pure] public static DateTime PreviousDay(this DateTime start) Parameters Type Name Description DateTime start Returns Type Description DateTime | Edit this page View Source PreviousMonth(DateTime) Returns the previous month keeping the time component intact. Eg, 2010-01-20T06:40:20.005 => 2009-12-20T06:40:20.005 If the previous month doesn't have that many days the last day of the previous month is used. Eg, 2009-03-31T06:40:20.005 => 2009-02-28T06:40:20.005 Declaration [Pure] public static DateTime PreviousMonth(this DateTime current) Parameters Type Name Description DateTime current The DateTime to adjust Returns Type Description DateTime | Edit this page View Source PreviousYear(DateTime) Returns the same date (same Day, Month, Hour, Minute, Second etc) in the previous calendar year. If that day does not exist in previous year in same month, number of missing days is added to the last day in same month previous year. Declaration [Pure] public static DateTime PreviousYear(this DateTime start) Parameters Type Name Description DateTime start Returns Type Description DateTime | Edit this page View Source Round(DateTime, RoundTo) Rounds dateTime to the nearest RoundTo. Declaration [Pure] public static DateTime Round(this DateTime dateTime, RoundTo rt) Parameters Type Name Description DateTime dateTime RoundTo rt Returns Type Description DateTime The rounded DateTime. | Edit this page View Source SameDay(DateTime, DateTime) Determines whether the specified DateTime value is exactly the same day (day + month + year) then current Declaration [Pure] public static bool SameDay(this DateTime current, DateTime date) Parameters Type Name Description DateTime current The current value DateTime date Value to compare with Returns Type Description bool true if the specified date is exactly the same year then current; otherwise, false. | Edit this page View Source SameMonth(DateTime, DateTime) Determines whether the specified DateTime value is exactly the same month (month + year) then current. Eg, 2015-12-01 and 2014-12-01 => False Declaration [Pure] public static bool SameMonth(this DateTime current, DateTime date) Parameters Type Name Description DateTime current The current value DateTime date Value to compare with Returns Type Description bool true if the specified date is exactly the same month and year then current; otherwise, false. | Edit this page View Source SameYear(DateTime, DateTime) Determines whether the specified DateTime value is exactly the same year then current. Eg, 2015-12-01 and 2015-01-01 => True Declaration [Pure] public static bool SameYear(this DateTime current, DateTime date) Parameters Type Name Description DateTime current The current value DateTime date Value to compare with Returns Type Description bool true if the specified date is exactly the same date then current; otherwise, false. | Edit this page View Source SetDate(DateTime, int) Returns DateTime with changed Year part. Declaration [Pure] public static DateTime SetDate(this DateTime value, int year) Parameters Type Name Description DateTime value int year Returns Type Description DateTime | Edit this page View Source SetDate(DateTime, int, int) Returns DateTime with changed Year and Month part. Declaration [Pure] public static DateTime SetDate(this DateTime value, int year, int month) Parameters Type Name Description DateTime value int year int month Returns Type Description DateTime | Edit this page View Source SetDate(DateTime, int, int, int) Returns DateTime with changed Year, Month and Day part. Declaration [Pure] public static DateTime SetDate(this DateTime value, int year, int month, int day) Parameters Type Name Description DateTime value int year int month int day Returns Type Description DateTime | Edit this page View Source SetDay(DateTime, int) Returns DateTime with changed Day part. Declaration [Pure] public static DateTime SetDay(this DateTime value, int day) Parameters Type Name Description DateTime value int day Returns Type Description DateTime | Edit this page View Source SetHour(DateTime, int) Returns DateTime with changed Hour part. Declaration [Pure] public static DateTime SetHour(this DateTime originalDate, int hour) Parameters Type Name Description DateTime originalDate int hour Returns Type Description DateTime | Edit this page View Source SetMillisecond(DateTime, int) Returns DateTime with changed Millisecond part. Declaration [Pure] public static DateTime SetMillisecond(this DateTime originalDate, int millisecond) Parameters Type Name Description DateTime originalDate int millisecond Returns Type Description DateTime | Edit this page View Source SetMinute(DateTime, int) Returns DateTime with changed Minute part. Declaration [Pure] public static DateTime SetMinute(this DateTime originalDate, int minute) Parameters Type Name Description DateTime originalDate int minute Returns Type Description DateTime | Edit this page View Source SetMonth(DateTime, int) Returns DateTime with changed Month part. Declaration [Pure] public static DateTime SetMonth(this DateTime value, int month) Parameters Type Name Description DateTime value int month Returns Type Description DateTime | Edit this page View Source SetSecond(DateTime, int) Returns DateTime with changed Second part. Declaration [Pure] public static DateTime SetSecond(this DateTime originalDate, int second) Parameters Type Name Description DateTime originalDate int second Returns Type Description DateTime | Edit this page View Source SetTime(DateTime, int) Returns the original DateTime with Hour part changed to supplied hour parameter. Declaration [Pure] public static DateTime SetTime(this DateTime originalDate, int hour) Parameters Type Name Description DateTime originalDate int hour Returns Type Description DateTime | Edit this page View Source SetTime(DateTime, int, int) Returns the original DateTime with Hour and Minute parts changed to supplied hour and minute parameters. Declaration [Pure] public static DateTime SetTime(this DateTime originalDate, int hour, int minute) Parameters Type Name Description DateTime originalDate int hour int minute Returns Type Description DateTime | Edit this page View Source SetTime(DateTime, int, int, int) Returns the original DateTime with Hour, Minute and Second parts changed to supplied hour, minute and second parameters. Declaration [Pure] public static DateTime SetTime(this DateTime originalDate, int hour, int minute, int second) Parameters Type Name Description DateTime originalDate int hour int minute int second Returns Type Description DateTime | Edit this page View Source SetTime(DateTime, int, int, int, int) Returns the original DateTime with Hour, Minute, Second and Millisecond parts changed to supplied hour, minute, second and millisecond parameters. Declaration [Pure] public static DateTime SetTime(this DateTime originalDate, int hour, int minute, int second, int millisecond) Parameters Type Name Description DateTime originalDate int hour int minute int second int millisecond Returns Type Description DateTime | Edit this page View Source SetYear(DateTime, int) Returns DateTime with changed Year part. Declaration [Pure] public static DateTime SetYear(this DateTime value, int year) Parameters Type Name Description DateTime value int year Returns Type Description DateTime | Edit this page View Source Since(TimeSpan, DateTime) Adds given TimeSpan to supplied originalValueDateTime and returns resulting DateTime in the future. Declaration [Pure] public static DateTime Since(this TimeSpan from, DateTime originalValue) Parameters Type Name Description TimeSpan from DateTime originalValue Returns Type Description DateTime Remarks Synonym of From(TimeSpan, DateTime) method. See Also From(TimeSpan, DateTime) | Edit this page View Source StartOfWeek(DateTime) Obsolete. This method has been renamed to FirstDayOfWeek to be more consistent with existing conventions. Declaration [Obsolete(\"This method has been renamed to FirstDayOfWeek to be more consistent with existing conventions.\")] [Pure] public static DateTime StartOfWeek(this DateTime dateTime) Parameters Type Name Description DateTime dateTime Returns Type Description DateTime | Edit this page View Source SubtractBusinessDays(DateTime, int) Subtracts the given number of business days to the DateTime. Declaration [Pure] public static DateTime SubtractBusinessDays(this DateTime current, int days) Parameters Type Name Description DateTime current The date to be changed. int days Number of business days to be subtracted. Returns Type Description DateTime A DateTime increased by a given number of business days. | Edit this page View Source WeekAfter(DateTime) Increases supplied DateTime for 7 days ie returns the Next Week. Declaration [Pure] public static DateTime WeekAfter(this DateTime start) Parameters Type Name Description DateTime start Returns Type Description DateTime | Edit this page View Source WeekEarlier(DateTime) Decreases supplied DateTime for 7 days ie returns the Previous Week. Declaration [Pure] public static DateTime WeekEarlier(this DateTime start) Parameters Type Name Description DateTime start Returns Type Description DateTime"
  },
  "api/Yolu.DateTimes.DateTimeOffsetExtensions.html": {
    "href": "api/Yolu.DateTimes.DateTimeOffsetExtensions.html",
    "title": "Class DateTimeOffsetExtensions | Yolu",
    "keywords": "Class DateTimeOffsetExtensions Static class containing Fluent DateTimeOffset extension methods. Inheritance object DateTimeOffsetExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.DateTimes Assembly: Yolu.dll Syntax public static class DateTimeOffsetExtensions Methods | Edit this page View Source AddBusinessDays(DateTimeOffset, int) Adds the given number of business days to the DateTimeOffset. Declaration [Pure] public static DateTimeOffset AddBusinessDays(this DateTimeOffset current, int days) Parameters Type Name Description DateTimeOffset current The date to be changed. int days Number of business days to be added. Returns Type Description DateTimeOffset A DateTimeOffset increased by a given number of business days. | Edit this page View Source At(DateTimeOffset, int, int) Returns the given DateTimeOffset with hour and minutes set At given values. Declaration [Pure] public static DateTimeOffset At(this DateTimeOffset current, int hour, int minute) Parameters Type Name Description DateTimeOffset current The current DateTimeOffset to be changed. int hour The hour to set time to. int minute The minute to set time to. Returns Type Description DateTimeOffset DateTimeOffset with hour and minute set to given values. | Edit this page View Source At(DateTimeOffset, int, int, int) Returns the given DateTimeOffset with hour and minutes and seconds set At given values. Declaration [Pure] public static DateTimeOffset At(this DateTimeOffset current, int hour, int minute, int second) Parameters Type Name Description DateTimeOffset current The current DateTimeOffset to be changed. int hour The hour to set time to. int minute The minute to set time to. int second The second to set time to. Returns Type Description DateTimeOffset DateTimeOffset with hour and minutes and seconds set to given values. | Edit this page View Source At(DateTimeOffset, int, int, int, int) Returns the given DateTimeOffset with hour and minutes and seconds and milliseconds set At given values. Declaration [Pure] public static DateTimeOffset At(this DateTimeOffset current, int hour, int minute, int second, int milliseconds) Parameters Type Name Description DateTimeOffset current The current DateTimeOffset to be changed. int hour The hour to set time to. int minute The minute to set time to. int second The second to set time to. int milliseconds The milliseconds to set time to. Returns Type Description DateTimeOffset DateTimeOffset with hour and minutes and seconds set to given values. | Edit this page View Source BeginningOfDay(DateTimeOffset) Returns the Start of the given day (the first millisecond of the given DateTimeOffset). Declaration [Pure] public static DateTimeOffset BeginningOfDay(this DateTimeOffset date) Parameters Type Name Description DateTimeOffset date Returns Type Description DateTimeOffset | Edit this page View Source DecreaseTime(DateTimeOffset, TimeSpan) Decreases the DateTimeOffset object with given TimeSpan value. Declaration [Pure] public static DateTimeOffset DecreaseTime(this DateTimeOffset startDate, TimeSpan toSubtract) Parameters Type Name Description DateTimeOffset startDate TimeSpan toSubtract Returns Type Description DateTimeOffset | Edit this page View Source EndOfDay(DateTimeOffset) Returns the very end of the given day (the last millisecond of the last hour for the given DateTimeOffset). Declaration [Pure] public static DateTimeOffset EndOfDay(this DateTimeOffset date) Parameters Type Name Description DateTimeOffset date Returns Type Description DateTimeOffset | Edit this page View Source FirstDayOfMonth(DateTimeOffset) Sets the day of the DateTimeOffset to the first day in that month. Declaration [Pure] public static DateTimeOffset FirstDayOfMonth(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current The current DateTimeOffset to be changed. Returns Type Description DateTimeOffset given DateTimeOffset with the day part set to the first day in that month. | Edit this page View Source FirstDayOfQuarter(DateTimeOffset) Sets the day of the DateTimeOffset to the first day in that calendar quarter. credit to http://www.devcurry.com/2009/05/find-first-and-last-day-of-current.html Declaration [Pure] public static DateTimeOffset FirstDayOfQuarter(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current Returns Type Description DateTimeOffset given DateTimeOffset with the day part set to the first day in the quarter. | Edit this page View Source FirstDayOfWeek(DateTimeOffset) Returns a DateTimeOffset adjusted to the beginning of the week. Declaration [Pure] public static DateTimeOffset FirstDayOfWeek(this DateTimeOffset dateTime) Parameters Type Name Description DateTimeOffset dateTime The DateTimeOffset to adjust Returns Type Description DateTimeOffset A DateTimeOffset instance adjusted to the beginning of the current week Remarks the beginning of the week is controlled by the current Culture | Edit this page View Source FirstDayOfYear(DateTimeOffset) Returns the first day of the year keeping the time component intact. Eg, 2011-02-04T06:40:20.005 => 2011-01-01T06:40:20.005 Declaration [Pure] public static DateTimeOffset FirstDayOfYear(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current The DateTimeOffset to adjust Returns Type Description DateTimeOffset | Edit this page View Source IncreaseTime(DateTimeOffset, TimeSpan) Increases the DateTimeOffset object with given TimeSpan value. Declaration [Pure] public static DateTimeOffset IncreaseTime(this DateTimeOffset startDate, TimeSpan toAdd) Parameters Type Name Description DateTimeOffset startDate TimeSpan toAdd Returns Type Description DateTimeOffset | Edit this page View Source IsAfter(DateTimeOffset, DateTimeOffset) Determines whether the specified DateTimeOffset value is After then current value. Declaration [Pure] public static bool IsAfter(this DateTimeOffset current, DateTimeOffset toCompareWith) Parameters Type Name Description DateTimeOffset current The current value. DateTimeOffset toCompareWith Value to compare with. Returns Type Description bool true if the specified current is after; otherwise, false. | Edit this page View Source IsBefore(DateTimeOffset, DateTimeOffset) Determines whether the specified DateTimeOffset is before then current value. Declaration [Pure] public static bool IsBefore(this DateTimeOffset current, DateTimeOffset toCompareWith) Parameters Type Name Description DateTimeOffset current The current value. DateTimeOffset toCompareWith Value to compare with. Returns Type Description bool true if the specified current is before; otherwise, false. | Edit this page View Source IsInFuture(DateTimeOffset) Determine if a DateTimeOffset is in the future. Declaration [Pure] public static bool IsInFuture(this DateTimeOffset dateTime) Parameters Type Name Description DateTimeOffset dateTime The date to be checked. Returns Type Description bool true if dateTime is in the future; otherwise false. | Edit this page View Source IsInPast(DateTimeOffset) Determine if a DateTimeOffset is in the past. Declaration [Pure] public static bool IsInPast(this DateTimeOffset dateTime) Parameters Type Name Description DateTimeOffset dateTime The date to be checked. Returns Type Description bool true if dateTime is in the past; otherwise false. | Edit this page View Source LastDayOfMonth(DateTimeOffset) Sets the day of the DateTimeOffset to the last day in that month. Declaration [Pure] public static DateTimeOffset LastDayOfMonth(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current The current DateTimeOffset to be changed. Returns Type Description DateTimeOffset given DateTimeOffset with the day part set to the last day in that month. | Edit this page View Source LastDayOfQuarter(DateTimeOffset) Sets the day of the DateTimeOffset to the last day in that calendar quarter. credit to http://www.devcurry.com/2009/05/find-first-and-last-day-of-current.html Declaration [Pure] public static DateTimeOffset LastDayOfQuarter(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current Returns Type Description DateTimeOffset given DateTimeOffset with the day part set to the last day in the quarter. | Edit this page View Source LastDayOfWeek(DateTimeOffset) Returns the last day of the week keeping the time component intact. Eg, 2011-12-24T06:40:20.005 => 2011-12-25T06:40:20.005 Declaration [Pure] public static DateTimeOffset LastDayOfWeek(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current The DateTimeOffset to adjust Returns Type Description DateTimeOffset | Edit this page View Source LastDayOfYear(DateTimeOffset) Returns the last day of the year keeping the time component intact. Eg, 2011-12-24T06:40:20.005 => 2011-12-31T06:40:20.005 Declaration [Pure] public static DateTimeOffset LastDayOfYear(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current The DateTimeOffset to adjust Returns Type Description DateTimeOffset | Edit this page View Source Midnight(DateTimeOffset) Returns original DateTimeOffset value with time part set to midnight (alias for BeginningOfDay(DateTimeOffset) method). Declaration [Pure] public static DateTimeOffset Midnight(this DateTimeOffset value) Parameters Type Name Description DateTimeOffset value Returns Type Description DateTimeOffset | Edit this page View Source Next(DateTimeOffset, DayOfWeek) Returns first next occurrence of specified DayOfWeek. Declaration public static DateTimeOffset Next(this DateTimeOffset start, DayOfWeek day) Parameters Type Name Description DateTimeOffset start DayOfWeek day Returns Type Description DateTimeOffset | Edit this page View Source NextDay(DateTimeOffset) Returns DateTimeOffset increased by 24 hours ie Next Day. Declaration [Pure] public static DateTimeOffset NextDay(this DateTimeOffset start) Parameters Type Name Description DateTimeOffset start Returns Type Description DateTimeOffset | Edit this page View Source NextMonth(DateTimeOffset) Returns the next month keeping the time component intact. Eg, 2012-12-05T06:40:20.005 => 2013-01-05T06:40:20.005 If the next month doesn't have that many days the last day of the next month is used. Eg, 2013-01-31T06:40:20.005 => 2013-02-28T06:40:20.005 Declaration [Pure] public static DateTimeOffset NextMonth(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current The DateTimeOffset to adjust Returns Type Description DateTimeOffset | Edit this page View Source NextYear(DateTimeOffset) Returns the same date (same Day, Month, Hour, Minute, Second etc) in the next calendar year. If that day does not exist in next year in same month, number of missing days is added to the last day in same month next year. Declaration [Pure] public static DateTimeOffset NextYear(this DateTimeOffset start) Parameters Type Name Description DateTimeOffset start Returns Type Description DateTimeOffset | Edit this page View Source Noon(DateTimeOffset) Returns original DateTimeOffset value with time part set to Noon (12:00:00h). Declaration [Pure] public static DateTimeOffset Noon(this DateTimeOffset value) Parameters Type Name Description DateTimeOffset value The DateTimeOffset find Noon for. Returns Type Description DateTimeOffset A DateTimeOffset value with time part set to Noon (12:00:00h). | Edit this page View Source Previous(DateTimeOffset, DayOfWeek) Returns first next occurrence of specified DayOfWeek. Declaration [Pure] public static DateTimeOffset Previous(this DateTimeOffset start, DayOfWeek day) Parameters Type Name Description DateTimeOffset start DayOfWeek day Returns Type Description DateTimeOffset | Edit this page View Source PreviousDay(DateTimeOffset) Returns DateTimeOffset decreased by 24h period ie Previous Day. Declaration [Pure] public static DateTimeOffset PreviousDay(this DateTimeOffset start) Parameters Type Name Description DateTimeOffset start Returns Type Description DateTimeOffset | Edit this page View Source PreviousMonth(DateTimeOffset) Returns the previous month keeping the time component intact. Eg, 2010-01-20T06:40:20.005 => 2009-12-20T06:40:20.005 If the previous month doesn't have that many days the last day of the previous month is used. Eg, 2009-03-31T06:40:20.005 => 2009-02-28T06:40:20.005 Declaration [Pure] public static DateTimeOffset PreviousMonth(this DateTimeOffset current) Parameters Type Name Description DateTimeOffset current The DateTimeOffset to adjust Returns Type Description DateTimeOffset | Edit this page View Source PreviousYear(DateTimeOffset) Returns the same date (same Day, Month, Hour, Minute, Second etc) in the previous calendar year. If that day does not exist in previous year in same month, number of missing days is added to the last day in same month previous year. Declaration [Pure] public static DateTimeOffset PreviousYear(this DateTimeOffset start) Parameters Type Name Description DateTimeOffset start Returns Type Description DateTimeOffset | Edit this page View Source Round(DateTimeOffset, RoundTo) Rounds dateTime to the nearest RoundTo. Declaration [Pure] public static DateTimeOffset Round(this DateTimeOffset dateTime, RoundTo rt) Parameters Type Name Description DateTimeOffset dateTime RoundTo rt Returns Type Description DateTimeOffset The rounded DateTimeOffset. | Edit this page View Source SameDay(DateTimeOffset, DateTimeOffset) Determines whether the specified DateTimeOffset value is exactly the same day (day + month + year) then current Declaration [Pure] public static bool SameDay(this DateTimeOffset current, DateTimeOffset date) Parameters Type Name Description DateTimeOffset current The current value DateTimeOffset date Value to compare with Returns Type Description bool true if the specified date is exactly the same year then current; otherwise, false. | Edit this page View Source SameMonth(DateTimeOffset, DateTimeOffset) Determines whether the specified DateTimeOffset value is exactly the same month (month + year) then current. Eg, 2015-12-01 and 2014-12-01 => False Declaration [Pure] public static bool SameMonth(this DateTimeOffset current, DateTimeOffset date) Parameters Type Name Description DateTimeOffset current The current value DateTimeOffset date Value to compare with Returns Type Description bool true if the specified date is exactly the same month and year then current; otherwise, false. | Edit this page View Source SameYear(DateTimeOffset, DateTimeOffset) Determines whether the specified DateTimeOffset value is exactly the same year then current. Eg, 2015-12-01 and 2015-01-01 => True Declaration [Pure] public static bool SameYear(this DateTimeOffset current, DateTimeOffset date) Parameters Type Name Description DateTimeOffset current The current value DateTimeOffset date Value to compare with Returns Type Description bool true if the specified date is exactly the same date then current; otherwise, false. | Edit this page View Source SetDate(DateTimeOffset, int) Returns DateTimeOffset with changed Year part. Declaration [Pure] public static DateTimeOffset SetDate(this DateTimeOffset value, int year) Parameters Type Name Description DateTimeOffset value int year Returns Type Description DateTimeOffset | Edit this page View Source SetDate(DateTimeOffset, int, int) Returns DateTimeOffset with changed Year and Month part. Declaration [Pure] public static DateTimeOffset SetDate(this DateTimeOffset value, int year, int month) Parameters Type Name Description DateTimeOffset value int year int month Returns Type Description DateTimeOffset | Edit this page View Source SetDate(DateTimeOffset, int, int, int) Returns DateTimeOffset with changed Year, Month and Day part. Declaration [Pure] public static DateTimeOffset SetDate(this DateTimeOffset value, int year, int month, int day) Parameters Type Name Description DateTimeOffset value int year int month int day Returns Type Description DateTimeOffset | Edit this page View Source SetDay(DateTimeOffset, int) Returns DateTimeOffset with changed Day part. Declaration [Pure] public static DateTimeOffset SetDay(this DateTimeOffset value, int day) Parameters Type Name Description DateTimeOffset value int day Returns Type Description DateTimeOffset | Edit this page View Source SetHour(DateTimeOffset, int) Returns DateTimeOffset with changed Hour part. Declaration [Pure] public static DateTimeOffset SetHour(this DateTimeOffset originalDate, int hour) Parameters Type Name Description DateTimeOffset originalDate int hour Returns Type Description DateTimeOffset | Edit this page View Source SetMillisecond(DateTimeOffset, int) Returns DateTimeOffset with changed Millisecond part. Declaration [Pure] public static DateTimeOffset SetMillisecond(this DateTimeOffset originalDate, int millisecond) Parameters Type Name Description DateTimeOffset originalDate int millisecond Returns Type Description DateTimeOffset | Edit this page View Source SetMinute(DateTimeOffset, int) Returns DateTimeOffset with changed Minute part. Declaration [Pure] public static DateTimeOffset SetMinute(this DateTimeOffset originalDate, int minute) Parameters Type Name Description DateTimeOffset originalDate int minute Returns Type Description DateTimeOffset | Edit this page View Source SetMonth(DateTimeOffset, int) Returns DateTimeOffset with changed Month part. Declaration [Pure] public static DateTimeOffset SetMonth(this DateTimeOffset value, int month) Parameters Type Name Description DateTimeOffset value int month Returns Type Description DateTimeOffset | Edit this page View Source SetSecond(DateTimeOffset, int) Returns DateTimeOffset with changed Second part. Declaration [Pure] public static DateTimeOffset SetSecond(this DateTimeOffset originalDate, int second) Parameters Type Name Description DateTimeOffset originalDate int second Returns Type Description DateTimeOffset | Edit this page View Source SetTime(DateTimeOffset, int) Returns the original DateTimeOffset with Hour part changed to supplied hour parameter. Declaration [Pure] public static DateTimeOffset SetTime(this DateTimeOffset originalDate, int hour) Parameters Type Name Description DateTimeOffset originalDate int hour Returns Type Description DateTimeOffset | Edit this page View Source SetTime(DateTimeOffset, int, int) Returns the original DateTimeOffset with Hour and Minute parts changed to supplied hour and minute parameters. Declaration [Pure] public static DateTimeOffset SetTime(this DateTimeOffset originalDate, int hour, int minute) Parameters Type Name Description DateTimeOffset originalDate int hour int minute Returns Type Description DateTimeOffset | Edit this page View Source SetTime(DateTimeOffset, int, int, int) Returns the original DateTimeOffset with Hour, Minute and Second parts changed to supplied hour, minute and second parameters. Declaration [Pure] public static DateTimeOffset SetTime(this DateTimeOffset originalDate, int hour, int minute, int second) Parameters Type Name Description DateTimeOffset originalDate int hour int minute int second Returns Type Description DateTimeOffset | Edit this page View Source SetTime(DateTimeOffset, int, int, int, int) Returns the original DateTimeOffset with Hour, Minute, Second and Millisecond parts changed to supplied hour, minute, second and millisecond parameters. Declaration [Pure] public static DateTimeOffset SetTime(this DateTimeOffset originalDate, int hour, int minute, int second, int millisecond) Parameters Type Name Description DateTimeOffset originalDate int hour int minute int second int millisecond Returns Type Description DateTimeOffset | Edit this page View Source SetYear(DateTimeOffset, int) Returns DateTimeOffset with changed Year part. Declaration [Pure] public static DateTimeOffset SetYear(this DateTimeOffset value, int year) Parameters Type Name Description DateTimeOffset value int year Returns Type Description DateTimeOffset | Edit this page View Source StartOfWeek(DateTimeOffset) Obsolete. This method has been renamed to FirstDayOfWeek to be more consistent with existing conventions. Declaration [Obsolete(\"This method has been renamed to FirstDayOfWeek to be more consistent with existing conventions.\")] [Pure] public static DateTimeOffset StartOfWeek(this DateTimeOffset dateTime) Parameters Type Name Description DateTimeOffset dateTime Returns Type Description DateTimeOffset | Edit this page View Source SubtractBusinessDays(DateTimeOffset, int) Subtracts the given number of business days to the DateTimeOffset. Declaration [Pure] public static DateTimeOffset SubtractBusinessDays(this DateTimeOffset current, int days) Parameters Type Name Description DateTimeOffset current The date to be changed. int days Number of business days to be subtracted. Returns Type Description DateTimeOffset A DateTimeOffset increased by a given number of business days. | Edit this page View Source WeekAfter(DateTimeOffset) Increases supplied DateTimeOffset for 7 days ie returns the Next Week. Declaration [Pure] public static DateTimeOffset WeekAfter(this DateTimeOffset start) Parameters Type Name Description DateTimeOffset start Returns Type Description DateTimeOffset | Edit this page View Source WeekEarlier(DateTimeOffset) Decreases supplied DateTimeOffset for 7 days ie returns the Previous Week. Declaration [Pure] public static DateTimeOffset WeekEarlier(this DateTimeOffset start) Parameters Type Name Description DateTimeOffset start Returns Type Description DateTimeOffset"
  },
  "api/Yolu.DateTimes.IntExtensions.html": {
    "href": "api/Yolu.DateTimes.IntExtensions.html",
    "title": "Class IntExtensions | Yolu",
    "keywords": "Class IntExtensions Inheritance object IntExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.DateTimes Assembly: Yolu.dll Syntax public static class IntExtensions Methods | Edit this page View Source Apr(int, int) Returns the specified day in April of the given year. Declaration [Pure] public static DateOnly Apr(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 30). Returns Type Description DateOnly | Edit this page View Source April(int, int) Returns the specified day in April of the given year. Declaration [Pure] public static DateOnly April(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 30). Returns Type Description DateOnly | Edit this page View Source Aug(int, int) Returns the specified day in August of the given year. Declaration [Pure] public static DateOnly Aug(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source August(int, int) Returns the specified day in August of the given year. Declaration [Pure] public static DateOnly August(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source Dec(int, int) Returns the specified day in December of the given year. Declaration [Pure] public static DateOnly Dec(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source December(int, int) Returns the specified day in December of the given year. Declaration [Pure] public static DateOnly December(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source Feb(int, int) Returns the specified day in February of the given year. Declaration [Pure] public static DateOnly Feb(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 28 in a common year, and 29 in leap years). Returns Type Description DateOnly | Edit this page View Source February(int, int) Returns the specified day in February of the given year. Declaration [Pure] public static DateOnly February(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 28 in a common year, and 29 in leap years). Returns Type Description DateOnly | Edit this page View Source Jan(int, int) Returns the specified day in January of the given year. Declaration [Pure] public static DateOnly Jan(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source January(int, int) Returns the specified day in January of the given year. Declaration [Pure] public static DateOnly January(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source Jul(int, int) Returns the specified day in July of the given year. Declaration [Pure] public static DateOnly Jul(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source July(int, int) Returns the specified day in July of the given year. Declaration [Pure] public static DateOnly July(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source Jun(int, int) Returns the specified day in June of the given year. Declaration [Pure] public static DateOnly Jun(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 30). Returns Type Description DateOnly | Edit this page View Source June(int, int) Returns the specified day in June of the given year. Declaration [Pure] public static DateOnly June(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 30). Returns Type Description DateOnly | Edit this page View Source Mar(int, int) Returns the specified day in March of the given year. Declaration [Pure] public static DateOnly Mar(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source March(int, int) Returns the specified day in March of the given year. Declaration [Pure] public static DateOnly March(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source May(int, int) Returns the specified day in May of the given year. Declaration [Pure] public static DateOnly May(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source Nov(int, int) Returns the specified day in November of the given year. Declaration [Pure] public static DateOnly Nov(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 30). Returns Type Description DateOnly | Edit this page View Source November(int, int) Returns the specified day in November of the given year. Declaration [Pure] public static DateOnly November(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 30). Returns Type Description DateOnly | Edit this page View Source Oct(int, int) Returns the specified day in October of the given year. Declaration [Pure] public static DateOnly Oct(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source October(int, int) Returns the specified day in October of the given year. Declaration [Pure] public static DateOnly October(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 31). Returns Type Description DateOnly | Edit this page View Source Sep(int, int) Returns the specified day in September of the given year. Declaration [Pure] public static DateOnly Sep(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 30). Returns Type Description DateOnly | Edit this page View Source September(int, int) Returns the specified day in September of the given year. Declaration [Pure] public static DateOnly September(this int year, int day) Parameters Type Name Description int year The year (1 through 9999). int day The day (1 through 30). Returns Type Description DateOnly"
  },
  "api/Yolu.DateTimes.NumberExtensions.html": {
    "href": "api/Yolu.DateTimes.NumberExtensions.html",
    "title": "Class NumberExtensions | Yolu",
    "keywords": "Class NumberExtensions Extension methods on int to allow for a more fluent way of specifying a TimeSpan. Inheritance object NumberExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.DateTimes Assembly: Yolu.dll Syntax public static class NumberExtensions Examples Instead of TimeSpan.FromHours(12) you can write 12.Hours() Or even 12.Hours().And(30.Minutes()). Fields | Edit this page View Source TicksPerMicrosecond Represents the number of ticks that are in 1 microsecond. Declaration public const long TicksPerMicrosecond = 10 Field Value Type Description long | Edit this page View Source TicksPerNanosecond Represents the number of ticks that are in 1 nanosecond. Declaration public const double TicksPerNanosecond = 0.01 Field Value Type Description double Methods | Edit this page View Source And(TimeSpan, TimeSpan) Convenience method for chaining multiple calls to the methods provided by this class. Declaration [Pure] public static TimeSpan And(this TimeSpan sourceTime, TimeSpan offset) Parameters Type Name Description TimeSpan sourceTime TimeSpan offset Returns Type Description TimeSpan Examples 23.Hours().And(59.Minutes()) | Edit this page View Source Days(double) Returns TimeSpan for given number of Days (number of days). Declaration [Pure] public static TimeSpan Days(this double days) Parameters Type Name Description double days Returns Type Description TimeSpan | Edit this page View Source Days(int) Returns TimeSpan for given number of Days (number of days). Declaration [Pure] public static TimeSpan Days(this int days) Parameters Type Name Description int days Returns Type Description TimeSpan | Edit this page View Source Days(int, TimeSpan) Declaration [Pure] public static TimeSpan Days(this int days, TimeSpan offset) Parameters Type Name Description int days TimeSpan offset Returns Type Description TimeSpan | Edit this page View Source Hours(double) Returns TimeSpan for given number of Hours. Declaration [Pure] public static TimeSpan Hours(this double hours) Parameters Type Name Description double hours Returns Type Description TimeSpan | Edit this page View Source Hours(int) Returns TimeSpan for given number of Hours. Declaration [Pure] public static TimeSpan Hours(this int hours) Parameters Type Name Description int hours Returns Type Description TimeSpan | Edit this page View Source Hours(int, TimeSpan) Returns a TimeSpan based on a number of hours, and add the specified offset. Declaration [Pure] public static TimeSpan Hours(this int hours, TimeSpan offset) Parameters Type Name Description int hours TimeSpan offset Returns Type Description TimeSpan | Edit this page View Source Microseconds(int) Returns a TimeSpan based on a number of microseconds. Declaration [Pure] public static TimeSpan Microseconds(this int microseconds) Parameters Type Name Description int microseconds Returns Type Description TimeSpan | Edit this page View Source Microseconds(long) Returns a TimeSpan based on a number of microseconds. Declaration [Pure] public static TimeSpan Microseconds(this long microseconds) Parameters Type Name Description long microseconds Returns Type Description TimeSpan | Edit this page View Source Microseconds(TimeSpan) Gets the microseconds component of the time interval represented by the current TimeSpan structure. Declaration [Pure] public static int Microseconds(this TimeSpan self) Parameters Type Name Description TimeSpan self Returns Type Description int | Edit this page View Source Milliseconds(double) Returns TimeSpan for given number of Milliseconds. Declaration [Pure] public static TimeSpan Milliseconds(this double milliseconds) Parameters Type Name Description double milliseconds Returns Type Description TimeSpan | Edit this page View Source Milliseconds(int) Returns TimeSpan for given number of Milliseconds. Declaration [Pure] public static TimeSpan Milliseconds(this int milliseconds) Parameters Type Name Description int milliseconds Returns Type Description TimeSpan | Edit this page View Source Minutes(double) Returns TimeSpan for given number of Minutes. Declaration [Pure] public static TimeSpan Minutes(this double minutes) Parameters Type Name Description double minutes Returns Type Description TimeSpan | Edit this page View Source Minutes(int) Returns TimeSpan for given number of Minutes. Declaration [Pure] public static TimeSpan Minutes(this int minutes) Parameters Type Name Description int minutes Returns Type Description TimeSpan | Edit this page View Source Minutes(int, TimeSpan) Returns a TimeSpan based on a number of minutes, and add the specified offset. Declaration [Pure] public static TimeSpan Minutes(this int minutes, TimeSpan offset) Parameters Type Name Description int minutes TimeSpan offset Returns Type Description TimeSpan | Edit this page View Source Nanoseconds(int) Returns a TimeSpan based on a number of nanoseconds. Declaration [Pure] public static TimeSpan Nanoseconds(this int nanoseconds) Parameters Type Name Description int nanoseconds Returns Type Description TimeSpan Remarks .NET's smallest resolutions is 100 nanoseconds. Any nanoseconds passed in lower than .NET's resolution will be rounded using the default rounding algorithm in Math.Round(). | Edit this page View Source Nanoseconds(long) Returns a TimeSpan based on a number of nanoseconds. Declaration [Pure] public static TimeSpan Nanoseconds(this long nanoseconds) Parameters Type Name Description long nanoseconds Returns Type Description TimeSpan Remarks .NET's smallest resolutions is 100 nanoseconds. Any nanoseconds passed in lower than .NET's resolution will be rounded using the default rounding algorithm in Math.Round(). | Edit this page View Source Nanoseconds(TimeSpan) Gets the nanoseconds component of the time interval represented by the current TimeSpan structure. Declaration [Pure] public static int Nanoseconds(this TimeSpan self) Parameters Type Name Description TimeSpan self Returns Type Description int | Edit this page View Source Seconds(double) Returns TimeSpan for given number of Seconds. Declaration [Pure] public static TimeSpan Seconds(this double seconds) Parameters Type Name Description double seconds Returns Type Description TimeSpan | Edit this page View Source Seconds(int) Returns TimeSpan for given number of Seconds. Declaration public static TimeSpan Seconds(this int seconds) Parameters Type Name Description int seconds Returns Type Description TimeSpan | Edit this page View Source Seconds(int, TimeSpan) Returns a TimeSpan based on a number of seconds, and add the specified offset. Declaration [Pure] public static TimeSpan Seconds(this int seconds, TimeSpan offset) Parameters Type Name Description int seconds TimeSpan offset Returns Type Description TimeSpan | Edit this page View Source Ticks(int) Returns TimeSpan for given number of ticks. Declaration [Pure] public static TimeSpan Ticks(this int ticks) Parameters Type Name Description int ticks Returns Type Description TimeSpan | Edit this page View Source Ticks(long) Returns a TimeSpan based on a number of ticks. Declaration [Pure] public static TimeSpan Ticks(this long ticks) Parameters Type Name Description long ticks Returns Type Description TimeSpan | Edit this page View Source TotalMicroseconds(TimeSpan) Gets the value of the current TimeSpan structure expressed in whole and fractional microseconds. Declaration [Pure] public static double TotalMicroseconds(this TimeSpan self) Parameters Type Name Description TimeSpan self Returns Type Description double | Edit this page View Source TotalNanoseconds(TimeSpan) Gets the value of the current TimeSpan structure expressed in whole and fractional nanoseconds. Declaration [Pure] public static double TotalNanoseconds(this TimeSpan self) Parameters Type Name Description TimeSpan self Returns Type Description double | Edit this page View Source Weeks(double) Returns TimeSpan for given number of Weeks (number of weeks * 7). Declaration [Pure] public static TimeSpan Weeks(this double weeks) Parameters Type Name Description double weeks Returns Type Description TimeSpan | Edit this page View Source Weeks(int) Returns TimeSpan for given number of Weeks (number of weeks * 7). Declaration [Pure] public static TimeSpan Weeks(this int weeks) Parameters Type Name Description int weeks Returns Type Description TimeSpan | Edit this page View Source Years(int) Generates TimeSpan value for given number of Years. Declaration [Pure] public static TimeSpan Years(this int years) Parameters Type Name Description int years Returns Type Description TimeSpan"
  },
  "api/Yolu.DateTimes.RoundTo.html": {
    "href": "api/Yolu.DateTimes.RoundTo.html",
    "title": "Enum RoundTo | Yolu",
    "keywords": "Enum RoundTo Used for rounding precision Namespace: Yolu.DateTimes Assembly: Yolu.dll Syntax public enum RoundTo Fields Name Description Day Day precision. Hour Hour precision. Minute Minute precision. Second Second precision. Extension Methods EnumUtils.CastTo<TEnum>(Enum, bool) EnumUtils.ToDisplayName(Enum) Enumerator.Skip<RoundTo, T>(ref RoundTo, int) TaskUtils.AsTask<RoundTo>(RoundTo) TaskUtils.AsValueTask<RoundTo>(RoundTo)"
  },
  "api/Yolu.DateTimes.TimeSpanExtensions.html": {
    "href": "api/Yolu.DateTimes.TimeSpanExtensions.html",
    "title": "Class TimeSpanExtensions | Yolu",
    "keywords": "Class TimeSpanExtensions Static class containing Fluent TimeSpan extension methods. Inheritance object TimeSpanExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.DateTimes Assembly: Yolu.dll Syntax public static class TimeSpanExtensions Methods | Edit this page View Source AddTimeSpan(TimeSpan, TimeSpan) Adds the given TimeSpan from a TimeSpan and returns resulting TimeSpan. Declaration [Pure] public static TimeSpan AddTimeSpan(this TimeSpan timeSpan, TimeSpan TimeSpan) Parameters Type Name Description TimeSpan timeSpan TimeSpan TimeSpan Returns Type Description TimeSpan | Edit this page View Source Round(TimeSpan, RoundTo) Rounds timeSpan to the nearest RoundTo. Declaration [Pure] public static TimeSpan Round(this TimeSpan timeSpan, RoundTo rt) Parameters Type Name Description TimeSpan timeSpan RoundTo rt Returns Type Description TimeSpan The rounded TimeSpan. | Edit this page View Source ToDisplayString(TimeSpan) Convert a TimeSpan to a human readable string. Declaration [Pure] public static string ToDisplayString(this TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan The TimeSpan to convert Returns Type Description string A human readable string for timeSpan"
  },
  "api/Yolu.DateTimes.Timestamp.html": {
    "href": "api/Yolu.DateTimes.Timestamp.html",
    "title": "Struct Timestamp | Yolu",
    "keywords": "Struct Timestamp Represents timestamp. Implements IEquatable<Timestamp> IComparable<Timestamp> IComparisonOperators<Timestamp, Timestamp, bool> IEqualityOperators<Timestamp, Timestamp, bool> IAdditionOperators<Timestamp, TimeSpan, Timestamp> ISubtractionOperators<Timestamp, TimeSpan, Timestamp> IInterlockedOperations<Timestamp> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu.DateTimes Assembly: Yolu.dll Syntax public readonly record struct Timestamp : IEquatable<Timestamp>, IComparable<Timestamp>, IComparisonOperators<Timestamp, Timestamp, bool>, IEqualityOperators<Timestamp, Timestamp, bool>, IAdditionOperators<Timestamp, TimeSpan, Timestamp>, ISubtractionOperators<Timestamp, TimeSpan, Timestamp>, IInterlockedOperations<Timestamp> Remarks This class can be used as allocation-free alternative to Stopwatch. Constructors | Edit this page View Source Timestamp() Captures the current point in time. Declaration public Timestamp() | Edit this page View Source Timestamp(TimeSpan) Constructs timestamp from TimeSpan. Declaration public Timestamp(TimeSpan ts) Parameters Type Name Description TimeSpan ts The point in time. Exceptions Type Condition ArgumentOutOfRangeException ts is negative. Properties | Edit this page View Source Elapsed Gets precise difference between the current point in time and this timestamp. Declaration public TimeSpan Elapsed { get; } Property Value Type Description TimeSpan Remarks This property is always greater than or equal to Zero. | Edit this page View Source ElapsedMilliseconds Gets the total elapsed time measured by the current instance, in milliseconds. Declaration public double ElapsedMilliseconds { get; } Property Value Type Description double | Edit this page View Source ElapsedTicks Gets the total elapsed time measured by the current instance, in timer ticks. Declaration public long ElapsedTicks { get; } Property Value Type Description long | Edit this page View Source IsEmpty Gets a value indicating that the timestamp is zero. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsFuture Gets a value indcating that the current timestamp represents the future point in time. Declaration public bool IsFuture { get; } Property Value Type Description bool | Edit this page View Source IsPast Gets a value indcating that the current timestamp represents the past point in time. Declaration public bool IsPast { get; } Property Value Type Description bool | Edit this page View Source Value Gets TimeSpan representing this timestamp. Declaration public TimeSpan Value { get; } Property Value Type Description TimeSpan Remarks This property may return a value with lost precision. Methods | Edit this page View Source CompareExchange(ref Timestamp, Timestamp, Timestamp) Compares two values for equality and, if they are equal, replaces the first value. Declaration public static Timestamp CompareExchange(ref Timestamp location, Timestamp value, Timestamp comparand) Parameters Type Name Description Timestamp location The destination, whose value is compared with comparand and possibly replaced. Timestamp value The value that replaces the destination value if the comparison results in equality. Timestamp comparand The value that is compared to the value at location. Returns Type Description Timestamp The original value in location. | Edit this page View Source CompareTo(Timestamp) Compares this timestamp with the given value. Declaration public int CompareTo(Timestamp other) Parameters Type Name Description Timestamp other The timestamp to compare. Returns Type Description int The result of comparison. | Edit this page View Source ElapsedSince(Timestamp) Gets a difference between two timestamps, in milliseconds. Declaration public double ElapsedSince(Timestamp past) Parameters Type Name Description Timestamp past The timestamp in the past. Returns Type Description double The number of milliseconds since past. | Edit this page View Source Refresh(ref Timestamp) Updates the timestamp to the current point in time and prevents the proces from reordering memory operations. Declaration public static void Refresh(ref Timestamp location) Parameters Type Name Description Timestamp location The location of the timestampt to update. | Edit this page View Source ToString() Gets timestamp in the form of the string. Declaration public override string ToString() Returns Type Description string The string representing this timestamp. Overrides ValueType.ToString() | Edit this page View Source VolatileRead(ref readonly Timestamp) Reads the timestamp and prevents the processor from reordering memory operations. Declaration public static Timestamp VolatileRead(ref readonly Timestamp location) Parameters Type Name Description Timestamp location The managed pointer to the timestamp. Returns Type Description Timestamp The value at the specified location. | Edit this page View Source VolatileWrite(ref Timestamp, Timestamp) Writes the timestamp and prevents the proces from reordering memory operations. Declaration public static void VolatileWrite(ref Timestamp location, Timestamp newValue) Parameters Type Name Description Timestamp location The managed pointer to the timestamp. Timestamp newValue The value to write. Operators | Edit this page View Source operator +(Timestamp, TimeSpan) Adds the specified duration to the timestamp. Declaration public static Timestamp operator +(Timestamp x, TimeSpan y) Parameters Type Name Description Timestamp x The timestamp value. TimeSpan y The delta. Returns Type Description Timestamp The modified timestamp. | Edit this page View Source operator checked +(Timestamp, TimeSpan) Adds the specified duration to the timestamp. Declaration public static Timestamp operator checked +(Timestamp x, TimeSpan y) Parameters Type Name Description Timestamp x The timestamp value. TimeSpan y The delta. Returns Type Description Timestamp The modified timestamp. Exceptions Type Condition OverflowException y is too large. | Edit this page View Source operator checked -(Timestamp, TimeSpan) Subtracts the specified duration from the timestamp. Declaration public static Timestamp operator checked -(Timestamp x, TimeSpan y) Parameters Type Name Description Timestamp x The timestamp value. TimeSpan y The delta. Returns Type Description Timestamp The modified timestamp. Exceptions Type Condition OverflowException y is too large. | Edit this page View Source explicit operator TimeSpan(Timestamp) Gets TimeSpan representing the given timestamp. Declaration public static explicit operator TimeSpan(Timestamp stamp) Parameters Type Name Description Timestamp stamp The timestamp to convert. Returns Type Description TimeSpan Remarks This operation leads to loss of precision. | Edit this page View Source operator >(Timestamp, Timestamp) Determines whether the first timestamp is greater than the second. Declaration public static bool operator >(Timestamp first, Timestamp second) Parameters Type Name Description Timestamp first The first timestamp to compare. Timestamp second The second timestamp to compare. Returns Type Description bool true if first is greater than second. | Edit this page View Source operator >=(Timestamp, Timestamp) Determines whether the first timestamp is greater than or equal to the second. Declaration public static bool operator >=(Timestamp first, Timestamp second) Parameters Type Name Description Timestamp first The first timestamp to compare. Timestamp second The second timestamp to compare. Returns Type Description bool true if first is greater than or equal to second. | Edit this page View Source operator <(Timestamp, Timestamp) Determines whether the first timestamp is less than the second. Declaration public static bool operator <(Timestamp first, Timestamp second) Parameters Type Name Description Timestamp first The first timestamp to compare. Timestamp second The second timestamp to compare. Returns Type Description bool true if first is less than second. | Edit this page View Source operator <=(Timestamp, Timestamp) Determines whether the first timestamp is less than or equal to the second. Declaration public static bool operator <=(Timestamp first, Timestamp second) Parameters Type Name Description Timestamp first The first timestamp to compare. Timestamp second The second timestamp to compare. Returns Type Description bool true if first is less than or equal to second. | Edit this page View Source operator -(Timestamp, TimeSpan) Subtracts the specified duration from the timestamp. Declaration public static Timestamp operator -(Timestamp x, TimeSpan y) Parameters Type Name Description Timestamp x The timestamp value. TimeSpan y The delta. Returns Type Description Timestamp The modified timestamp. Exceptions Type Condition OverflowException y is too large. Implements IEquatable<T> IComparable<T> IComparisonOperators<TSelf, TOther, TResult> IEqualityOperators<TSelf, TOther, TResult> IAdditionOperators<TSelf, TOther, TResult> ISubtractionOperators<TSelf, TOther, TResult> IInterlockedOperations<T> Extension Methods Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.DateTimes.html": {
    "href": "api/Yolu.DateTimes.html",
    "title": "Namespace Yolu.DateTimes | Yolu",
    "keywords": "Namespace Yolu.DateTimes Classes DateOnlyExtensions Static class containing Fluent DateOnly extension methods. DateTimeExtensions Static class containing Fluent DateTime extension methods. DateTimeOffsetExtensions Static class containing Fluent DateTimeOffset extension methods. IntExtensions NumberExtensions Extension methods on int to allow for a more fluent way of specifying a TimeSpan. TimeSpanExtensions Static class containing Fluent TimeSpan extension methods. Structs Timestamp Represents timestamp. Enums RoundTo Used for rounding precision"
  },
  "api/Yolu.DelegateHelpers.html": {
    "href": "api/Yolu.DelegateHelpers.html",
    "title": "Class DelegateHelpers | Yolu",
    "keywords": "Class DelegateHelpers Represents various extensions of delegates. Inheritance object DelegateHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public static class DelegateHelpers Methods | Edit this page View Source CreateClosedDelegateFactory<TDelegate>(Expression<TDelegate>) Creates a factory for closed delegates. Declaration public static Func<object, TDelegate> CreateClosedDelegateFactory<TDelegate>(Expression<TDelegate> expression) where TDelegate : Delegate Parameters Type Name Description Expression<TDelegate> expression The expression tree containing instance method, property, operator call. Returns Type Description Func<object, TDelegate> The factory of closed delegate. Type Parameters Name Description TDelegate The type of the delegate describing expression tree. | Edit this page View Source CreateOpenDelegate<TDelegate>(Expression<TDelegate>) Creates open delegate for the instance method, property, operator referenced in expression tree. Declaration public static TDelegate CreateOpenDelegate<TDelegate>(Expression<TDelegate> expression) where TDelegate : Delegate Parameters Type Name Description Expression<TDelegate> expression The expression tree containing instance method call. Returns Type Description TDelegate The open delegate. Type Parameters Name Description TDelegate The type of the delegate describing expression tree. Exceptions Type Condition ArgumentException expression is not valid expression tree. | Edit this page View Source CreateOpenDelegate<T, TValue>(Expression<Func<T, TValue>>) Creates open delegate for instance property setter. Declaration public static Action<T, TValue> CreateOpenDelegate<T, TValue>(Expression<Func<T, TValue>> properyExpr) where T : class Parameters Type Name Description Expression<Func<T, TValue>> properyExpr The expression representing property. Returns Type Description Action<T, TValue> The open delegate representing property setter. Type Parameters Name Description T The declaring type. TValue The type of property value."
  },
  "api/Yolu.Disposable.html": {
    "href": "api/Yolu.Disposable.html",
    "title": "Class Disposable | Yolu",
    "keywords": "Class Disposable Inheritance object Disposable DisposableHandler Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public class Disposable : IDisposable Properties | Edit this page View Source DisposedTask Gets a task representing ObjectDisposedException exception. Declaration protected Task DisposedTask { get; } Property Value Type Description Task | Edit this page View Source IsDisposed Indicates that this object is disposed. Declaration protected bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsDisposing Indicates that DisposeAsync() is called but not yet completed. Declaration protected bool IsDisposing { get; } Property Value Type Description bool | Edit this page View Source IsDisposingOrDisposed Indicates that DisposeAsync() is called. Declaration protected bool IsDisposingOrDisposed { get; } Property Value Type Description bool Methods | Edit this page View Source Dispose() Releases all resources associated with this object. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Releases managed and unmanaged resources associated with this object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true if called from Dispose(); false if called from finalizer ~Disposable(). | Edit this page View Source DisposeAsync() Releases managed resources associated with this object asynchronously. Declaration protected ValueTask DisposeAsync() Returns Type Description ValueTask The task representing asynchronous execution of this method. Remarks If derived class implements IAsyncDisposable then DisposeAsync() can be trivially implemented through delegation of the call to this method. | Edit this page View Source DisposeAsyncCore() Releases managed resources associated with this object asynchronously. Declaration protected virtual ValueTask DisposeAsyncCore() Returns Type Description ValueTask The task representing asynchronous execution of this method. Remarks This method makes sense only if derived class implements IAsyncDisposable interface. | Edit this page View Source ~Disposable() Throws an exception if this object is collected without being disposed Declaration protected ~Disposable() Exceptions Type Condition InvalidOperationException Thrown if the object is collected without being disposed | Edit this page View Source GetDisposedTask<T>() Returns a task representing ObjectDisposedException exception. Declaration protected Task<T> GetDisposedTask<T>() Returns Type Description Task<T> The task representing ObjectDisposedException exception. Type Parameters Name Description T The type of the task. | Edit this page View Source TryBeginDispose() Starts disposing this object. Declaration protected bool TryBeginDispose() Returns Type Description bool true if cleanup operations can be performed; false if the object is already disposing. | Edit this page View Source TrySetDisposedException(TaskCompletionSource) Attempts to complete the task with ObjectDisposedException exception. Declaration protected bool TrySetDisposedException(TaskCompletionSource source) Parameters Type Name Description TaskCompletionSource source The task completion source. Returns Type Description bool true if operation was successful; otherwise, false. | Edit this page View Source TrySetDisposedException<T>(TaskCompletionSource<T>) Attempts to complete the task with ObjectDisposedException exception. Declaration protected bool TrySetDisposedException<T>(TaskCompletionSource<T> source) Parameters Type Name Description TaskCompletionSource<T> source The task completion source. Returns Type Description bool true if operation was successful; otherwise, false. Type Parameters Name Description T The type of the task. Implements IDisposable Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.DisposableHandler.html": {
    "href": "api/Yolu.DisposableHandler.html",
    "title": "Class DisposableHandler | Yolu",
    "keywords": "Class DisposableHandler Inheritance object Disposable DisposableHandler Implements IDisposable Inherited Members Disposable.IsDisposed Disposable.IsDisposing Disposable.IsDisposingOrDisposed Disposable.DisposedTask Disposable.GetDisposedTask<T>() Disposable.TrySetDisposedException<T>(TaskCompletionSource<T>) Disposable.TrySetDisposedException(TaskCompletionSource) Disposable.DisposeAsyncCore() Disposable.DisposeAsync() Disposable.TryBeginDispose() Disposable.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public class DisposableHandler : Disposable, IDisposable Constructors | Edit this page View Source DisposableHandler(Action) Declaration public DisposableHandler(Action action) Parameters Type Name Description Action action Methods | Edit this page View Source Dispose(bool) Releases managed and unmanaged resources associated with this object. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true if called from Dispose(); false if called from finalizer ~Disposable(). Overrides Disposable.Dispose(bool) Implements IDisposable Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.DisposableUtils.html": {
    "href": "api/Yolu.DisposableUtils.html",
    "title": "Class DisposableUtils | Yolu",
    "keywords": "Class DisposableUtils Inheritance object DisposableUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public static class DisposableUtils Methods | Edit this page View Source Dispose(IEnumerable<IDisposable?>) Disposes many objects. Declaration public static void Dispose(IEnumerable<IDisposable?> objects) Parameters Type Name Description IEnumerable<IDisposable> objects An array of objects to dispose. | Edit this page View Source Dispose(ReadOnlySpan<IDisposable?>) Disposes many objects in safe manner. Declaration public static void Dispose(ReadOnlySpan<IDisposable?> objects) Parameters Type Name Description ReadOnlySpan<IDisposable> objects An array of objects to dispose. | Edit this page View Source DisposeAsync(IEnumerable<IAsyncDisposable?>) Disposes many objects. Declaration public static ValueTask DisposeAsync(IEnumerable<IAsyncDisposable?> objects) Parameters Type Name Description IEnumerable<IAsyncDisposable> objects An array of objects to dispose. Returns Type Description ValueTask The task representing asynchronous execution of this method. | Edit this page View Source DisposeAsync(params IAsyncDisposable?[]) Disposes many objects in safe manner. Declaration public static ValueTask DisposeAsync(params IAsyncDisposable?[] objects) Parameters Type Name Description IAsyncDisposable[] objects An array of objects to dispose. Returns Type Description ValueTask The task representing asynchronous execution of this method."
  },
  "api/Yolu.Enums.EnumUtils.html": {
    "href": "api/Yolu.Enums.EnumUtils.html",
    "title": "Class EnumUtils | Yolu",
    "keywords": "Class EnumUtils Utility class for working with enums. Inheritance object EnumUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Enums Assembly: Yolu.dll Syntax public static class EnumUtils Methods | Edit this page View Source CastTo<TEnum>(Enum, bool) Casts the specified Enum value to the specified TEnum type. Declaration public static TEnum CastTo<TEnum>(this Enum e, bool ignoreCase = true) where TEnum : struct, Enum Parameters Type Name Description Enum e The Enum value to cast. bool ignoreCase A boolean value indicating whether to ignore case when parsing the enum value. Returns Type Description TEnum The casted value of type TEnum. Type Parameters Name Description TEnum The type of the enum to cast to. Exceptions Type Condition InvalidCastException Thrown when the cast is not possible. | Edit this page View Source GetDisplayNameAndValues<TEnum>() Gets the display names and values of the specified enum type. Declaration public static IEnumerable<(string? Name, TEnum Value)> GetDisplayNameAndValues<TEnum>() where TEnum : struct, Enum Returns Type Description IEnumerable<(string Name, TEnum Value)> An enumerable of tuples containing the display name and value of each enum member. Type Parameters Name Description TEnum The enum type. | Edit this page View Source GetNameAndValues<TEnum>() Gets the names and values of the specified enum type. Declaration public static IEnumerable<(string Name, TEnum Value)> GetNameAndValues<TEnum>() where TEnum : struct, Enum Returns Type Description IEnumerable<(string Name, TEnum Value)> An enumerable of tuples containing the name and value of each enum member. Type Parameters Name Description TEnum The enum type. | Edit this page View Source ToDisplayName(Enum) Gets the display name of the specified enum value. Declaration public static string? ToDisplayName(this Enum e) Parameters Type Name Description Enum e The enum value. Returns Type Description string The display name of the enum value."
  },
  "api/Yolu.Enums.html": {
    "href": "api/Yolu.Enums.html",
    "title": "Namespace Yolu.Enums | Yolu",
    "keywords": "Namespace Yolu.Enums Classes EnumUtils Utility class for working with enums."
  },
  "api/Yolu.Error-1.html": {
    "href": "api/Yolu.Error-1.html",
    "title": "Class Error<TPayload> | Yolu",
    "keywords": "Class Error<TPayload> Represents the general error. Inheritance object Exception Error Error<TPayload> Implements ISerializable Inherited Members Error.DisplayMessage Error.EventId Error.WithDisplayMessage(string, PrefixedUlid) Error.WithDisplayMessage<TPayload>(TPayload, string, PrefixedUlid) Error.WithMessage(string, string, Exception, PrefixedUlid) Error.WithMessage<TPayload>(TPayload, string, string, Exception, PrefixedUlid) Error.WithException(Exception, string, string) Error.WithChild(Error, string, string) Error.WithChild<TPayload>(TPayload, Error, string, string) Error.FlattenDisplayMessages() Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Yolu Assembly: Yolu.dll Syntax public class Error<TPayload> : Error, ISerializable Type Parameters Name Description TPayload Constructors | Edit this page View Source Error(TPayload?, string, string?, PrefixedUlid?, Exception?) Represents the general error. Declaration public Error(TPayload? payload, string message, string? displayMessage = null, PrefixedUlid? eventId = null, Exception? error = null) Parameters Type Name Description TPayload payload string message string displayMessage PrefixedUlid eventId Exception error Properties | Edit this page View Source Payload Declaration public TPayload? Payload { get; } Property Value Type Description TPayload Implements ISerializable Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Error.html": {
    "href": "api/Yolu.Error.html",
    "title": "Class Error | Yolu",
    "keywords": "Class Error Represents the general error. Inheritance object Exception Error Error<TPayload> Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Yolu Assembly: Yolu.dll Syntax public class Error : Exception, ISerializable Constructors | Edit this page View Source Error(string, string?, object?, PrefixedUlid?, Exception?) Initializes a new instance of the Error class. Declaration public Error(string message, string? displayMessage = null, object? payload = null, PrefixedUlid? eventId = null, Exception? exception = null) Parameters Type Name Description string message string displayMessage object payload PrefixedUlid eventId Exception exception Properties | Edit this page View Source DisplayMessage Declaration public string? DisplayMessage { get; } Property Value Type Description string | Edit this page View Source EventId Declaration public PrefixedUlid EventId { get; } Property Value Type Description PrefixedUlid | Edit this page View Source Payload Declaration public object? Payload { get; } Property Value Type Description object Methods | Edit this page View Source FlattenDisplayMessages() Declaration public Array<string> FlattenDisplayMessages() Returns Type Description Array<string> | Edit this page View Source WithChild(Error, string, string?) Declaration public static Error WithChild(Error ex, string message, string? displayMessage = null) Parameters Type Name Description Error ex string message string displayMessage Returns Type Description Error | Edit this page View Source WithChild<TPayload>(TPayload, Error, string, string?) Declaration public static Error<TPayload> WithChild<TPayload>(TPayload payload, Error ex, string message, string? displayMessage = null) Parameters Type Name Description TPayload payload Error ex string message string displayMessage Returns Type Description Error<TPayload> Type Parameters Name Description TPayload | Edit this page View Source WithDisplayMessage(string, PrefixedUlid?) Declaration public static Error WithDisplayMessage(string displayMessage, PrefixedUlid? eventId = null) Parameters Type Name Description string displayMessage PrefixedUlid eventId Returns Type Description Error | Edit this page View Source WithDisplayMessage<TPayload>(TPayload, string, PrefixedUlid?) Declaration public static Error<TPayload> WithDisplayMessage<TPayload>(TPayload exceptionType, string displayMessage, PrefixedUlid? eventId = null) Parameters Type Name Description TPayload exceptionType string displayMessage PrefixedUlid eventId Returns Type Description Error<TPayload> Type Parameters Name Description TPayload | Edit this page View Source WithException(Exception, string?, string?) Declaration public static Error WithException(Exception ex, string? message = null, string? displayMessage = null) Parameters Type Name Description Exception ex string message string displayMessage Returns Type Description Error | Edit this page View Source WithMessage(string, string?, Exception?, PrefixedUlid?) Declaration public static Error WithMessage(string message, string? displayMessage, Exception? ex = null, PrefixedUlid? eventId = null) Parameters Type Name Description string message string displayMessage Exception ex PrefixedUlid eventId Returns Type Description Error | Edit this page View Source WithMessage<TPayload>(TPayload, string, string?, Exception?, PrefixedUlid?) Declaration public static Error<TPayload> WithMessage<TPayload>(TPayload exceptionType, string message, string? displayMessage, Exception? ex = null, PrefixedUlid? eventId = null) Parameters Type Name Description TPayload exceptionType string message string displayMessage Exception ex PrefixedUlid eventId Returns Type Description Error<TPayload> Type Parameters Name Description TPayload Implements ISerializable Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.ErrorId.html": {
    "href": "api/Yolu.ErrorId.html",
    "title": "Class ErrorId | Yolu",
    "keywords": "Class ErrorId Inheritance object PrefixedUlid ErrorId Implements IEquatable<PrefixedUlid> IEquatable<ErrorId> Inherited Members PrefixedUlid.Value PrefixedUlid.FullValue PrefixedUlid.Parse<T>(string) PrefixedUlid.NewPrefixedUlid<T>() PrefixedUlid.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Yolu Assembly: Yolu.dll Syntax public record ErrorId : PrefixedUlid, IEquatable<PrefixedUlid>, IEquatable<ErrorId> Fields | Edit this page View Source Prefix Declaration public const string Prefix = \"error\" Field Value Type Description string | Edit this page View Source Separator Declaration public const string Separator = \"_\" Field Value Type Description string | Edit this page View Source TotalLength Declaration public const int TotalLength = 36 Field Value Type Description int Properties | Edit this page View Source PrefixWithSeparator Declaration public override string PrefixWithSeparator { get; } Property Value Type Description string Overrides PrefixedUlid.PrefixWithSeparator Methods | Edit this page View Source CreateNew() Declaration public static ErrorId CreateNew() Returns Type Description ErrorId | Edit this page View Source Parse(string) Declaration public static ErrorId Parse(string id) Parameters Type Name Description string id Returns Type Description ErrorId Implements IEquatable<T> IEquatable<T> Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Executors.ConcatAsyncOperationExecutor.html": {
    "href": "api/Yolu.Executors.ConcatAsyncOperationExecutor.html",
    "title": "Class ConcatAsyncOperationExecutor | Yolu",
    "keywords": "Class ConcatAsyncOperationExecutor Provides a feature to wait for the end of asynchronous processing and connect to the next processing. Inheritance object ConcatAsyncOperationExecutor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Executors Assembly: Yolu.dll Syntax public class ConcatAsyncOperationExecutor Methods | Edit this page View Source ExecuteAsync(Func<Task>) Waits for the end of asynchronous processing and concat to the next processing. Declaration public Task ExecuteAsync(Func<Task> operation) Parameters Type Name Description Func<Task> operation The async operation. Returns Type Description Task The async operation contains a result of processing. | Edit this page View Source ExecuteAsync<T>(Func<Task<T>>) Waits for the end of asynchronous processing and cancats to the next processing. Declaration public Task<T> ExecuteAsync<T>(Func<Task<T>> operation) Parameters Type Name Description Func<Task<T>> operation The async operation. Returns Type Description Task<T> The async oparation contains a result of processing. Type Parameters Name Description T Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Executors.ParallelCollectionExecutor-1.html": {
    "href": "api/Yolu.Executors.ParallelCollectionExecutor-1.html",
    "title": "Class ParallelCollectionExecutor<T> | Yolu",
    "keywords": "Class ParallelCollectionExecutor<T> Executes a collection of tasks in parallel. Inheritance object ParallelCollectionExecutor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Executors Assembly: Yolu.dll Syntax public class ParallelCollectionExecutor<T> Type Parameters Name Description T The type of tasks in the collection. Remarks Initializes a new instance of the ParallelCollectionExecutor<T> class. Constructors | Edit this page View Source ParallelCollectionExecutor(IEnumerable<T>, int) Executes a collection of tasks in parallel. Declaration public ParallelCollectionExecutor(IEnumerable<T> tasks, int parallelCount = 100) Parameters Type Name Description IEnumerable<T> tasks The collection of tasks to execute. int parallelCount The number of tasks to execute in parallel. Remarks Initializes a new instance of the ParallelCollectionExecutor<T> class. Properties | Edit this page View Source Count Gets the number of tasks in the collection. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source DelayPerStartup Gets or sets the delay per startup for each task. Declaration public TimeSpan DelayPerStartup { get; set; } Property Value Type Description TimeSpan | Edit this page View Source Progress Gets the progress of the execution. Declaration public int Progress { get; } Property Value Type Description int Methods | Edit this page View Source RunAsync(Func<T, Task>, Action<Exception>?) Runs the tasks asynchronously using the specified handler. Declaration public Task RunAsync(Func<T, Task> handler, Action<Exception>? onError = null) Parameters Type Name Description Func<T, Task> handler The handler to execute for each task. Action<Exception> onError The error handler to execute when an error occurs. Returns Type Description Task A task representing the asynchronous operation. Exceptions Type Condition Error Thrown if the handler is already invoked. Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Executors.ThrottledExecutor-1.html": {
    "href": "api/Yolu.Executors.ThrottledExecutor-1.html",
    "title": "Class ThrottledExecutor<T> | Yolu",
    "keywords": "Class ThrottledExecutor<T> Inheritance object ThrottledExecutor<T> Implements IObservable<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Executors Assembly: Yolu.dll Syntax public class ThrottledExecutor<T> : IObservable<T> Type Parameters Name Description T Constructors | Edit this page View Source ThrottledExecutor() Declaration public ThrottledExecutor() Properties | Edit this page View Source LatencyMs Declaration public ushort LatencyMs { get; set; } Property Value Type Description ushort Methods | Edit this page View Source Invoke(T) Declaration public void Invoke(T value) Parameters Type Name Description T value | Edit this page View Source Subscribe(Action<T>) Declaration public IDisposable Subscribe(Action<T> action) Parameters Type Name Description Action<T> action Returns Type Description IDisposable | Edit this page View Source Subscribe(IObserver<T>) Notifies the provider that an observer is to receive notifications. Declaration public IDisposable Subscribe(IObserver<T> observer) Parameters Type Name Description IObserver<T> observer The object that is to receive notifications. Returns Type Description IDisposable A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them. Implements IObservable<T> Extension Methods SubscriberExtensions.Subscribe<T>(IObservable<T>, Action<T>, Action<Exception>?, Action?) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Executors.html": {
    "href": "api/Yolu.Executors.html",
    "title": "Namespace Yolu.Executors | Yolu",
    "keywords": "Namespace Yolu.Executors Classes ConcatAsyncOperationExecutor Provides a feature to wait for the end of asynchronous processing and connect to the next processing. ParallelCollectionExecutor<T> Executes a collection of tasks in parallel. ThrottledExecutor<T>"
  },
  "api/Yolu.Foreach.RangeEnumerator.html": {
    "href": "api/Yolu.Foreach.RangeEnumerator.html",
    "title": "Struct Foreach.RangeEnumerator | Yolu",
    "keywords": "Struct Foreach.RangeEnumerator Implements IEnumerator<int> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu Assembly: Yolu.dll Syntax public struct Foreach.RangeEnumerator : IEnumerator<int>, IEnumerator, IDisposable Constructors | Edit this page View Source RangeEnumerator(Range) Initializes a new instance of the Foreach.RangeEnumerator struct. Declaration public RangeEnumerator(Range range) Parameters Type Name Description Range range The range to be enumerated. Properties | Edit this page View Source Current Gets the current position in the range. Declaration public readonly int Current { get; } Property Value Type Description int Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source MoveNext() Advances the enumerator to the next item in the range. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next item; false if the enumerator has passed the end of the range. | Edit this page View Source Reset() Sets the enumerator to its initial position, which is before the first item in the range. Declaration public void Reset() Exceptions Type Condition NotSupportedException The Reset() method is not supported. Implements IEnumerator<T> IEnumerator IDisposable Extension Methods Enumerator.Limit<T>(IEnumerator<T>, int, bool) Enumerator.Skip<T>(IEnumerator<T>, int) Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Foreach.html": {
    "href": "api/Yolu.Foreach.html",
    "title": "Class Foreach | Yolu",
    "keywords": "Class Foreach Provides a foreach loop with a specified range using the Range type. Inheritance object Foreach Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public static class Foreach Examples This example shows how to use the for loop with the Range type. foreach(var i in 0..^1000) { // Your code here. } Methods | Edit this page View Source GetEnumerator(Range) Provides a foreach loop with a specified range using the Range type. Declaration public static Foreach.RangeEnumerator GetEnumerator(this Range range) Parameters Type Name Description Range range The range to be used in the foreach loop. Returns Type Description Foreach.RangeEnumerator A Foreach.RangeEnumerator that can be used to iterate through the specified range. Examples This example shows how to use the GetEnumerator method. foreach(var i in 0..^1000) { // Your code here. }"
  },
  "api/Yolu.IDeepCloneable-1.html": {
    "href": "api/Yolu.IDeepCloneable-1.html",
    "title": "Interface IDeepCloneable<T> | Yolu",
    "keywords": "Interface IDeepCloneable<T> A generic interface for a deeply cloneable type. Namespace: Yolu Assembly: Yolu.dll Syntax public interface IDeepCloneable<out T> where T : class Type Parameters Name Description T The type of object to clone. Methods | Edit this page View Source DeepClone() Creates a new T that is a deep copy of the current instance. Declaration T DeepClone() Returns Type Description T The T. Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.IDeepCloneable.html": {
    "href": "api/Yolu.IDeepCloneable.html",
    "title": "Interface IDeepCloneable | Yolu",
    "keywords": "Interface IDeepCloneable An interface for objects that can be cloned. This creates a deep copy of the object. Namespace: Yolu Assembly: Yolu.dll Syntax public interface IDeepCloneable Methods | Edit this page View Source DeepClone() Creates a new object that is a deep copy of the current instance. Declaration IDeepCloneable DeepClone() Returns Type Description IDeepCloneable The IDeepCloneable. Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.ISingleton-1.html": {
    "href": "api/Yolu.ISingleton-1.html",
    "title": "Interface ISingleton<TSelf> | Yolu",
    "keywords": "Interface ISingleton<TSelf> Represents singleton pattern. Namespace: Yolu Assembly: Yolu.dll Syntax public interface ISingleton<out TSelf> where TSelf : class, ISingleton<out TSelf> Type Parameters Name Description TSelf Singleton type. Properties | Edit this page View Source Instance Gets singleton value. Declaration public static abstract TSelf Instance { get; } Property Value Type Description TSelf"
  },
  "api/Yolu.Identifier.PrefixedUlid.html": {
    "href": "api/Yolu.Identifier.PrefixedUlid.html",
    "title": "Class PrefixedUlid | Yolu",
    "keywords": "Class PrefixedUlid Inheritance object PrefixedUlid ErrorId Implements IEquatable<PrefixedUlid> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Yolu.Identifier Assembly: Yolu.dll Syntax public abstract record PrefixedUlid : IEquatable<PrefixedUlid> Constructors | Edit this page View Source PrefixedUlid() Declaration public PrefixedUlid() | Edit this page View Source PrefixedUlid(string) Declaration public PrefixedUlid(string id) Parameters Type Name Description string id Properties | Edit this page View Source FullValue Declaration public string FullValue { get; } Property Value Type Description string | Edit this page View Source PrefixWithSeparator Declaration public abstract string PrefixWithSeparator { get; } Property Value Type Description string | Edit this page View Source Value Declaration public Ulid Value { get; } Property Value Type Description Ulid Methods | Edit this page View Source NewPrefixedUlid<T>() Declaration public static T NewPrefixedUlid<T>() where T : PrefixedUlid, new() Returns Type Description T Type Parameters Name Description T | Edit this page View Source Parse<T>(string) Declaration public static T Parse<T>(string rawId) where T : PrefixedUlid, new() Parameters Type Name Description string rawId Returns Type Description T Type Parameters Name Description T | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override sealed string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IEquatable<T> Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Identifier.Ulid.html": {
    "href": "api/Yolu.Identifier.Ulid.html",
    "title": "Struct Ulid | Yolu",
    "keywords": "Struct Ulid Represents a Universally Unique Lexicographically Sortable Identifier (ULID). Spec: https://github.com/ulid/spec Implements IEquatable<Ulid> IComparable<Ulid> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu.Identifier Assembly: Yolu.dll Syntax [TypeConverter(typeof(UlidTypeConverter))] [JsonConverter(typeof(UlidJsonConverter))] public readonly struct Ulid : IEquatable<Ulid>, IComparable<Ulid> Constructors | Edit this page View Source Ulid(Guid) Declaration public Ulid(Guid guid) Parameters Type Name Description Guid guid | Edit this page View Source Ulid(ReadOnlySpan<byte>) Declaration public Ulid(ReadOnlySpan<byte> bytes) Parameters Type Name Description ReadOnlySpan<byte> bytes Fields | Edit this page View Source Empty Declaration public static readonly Ulid Empty Field Value Type Description Ulid | Edit this page View Source MaxValue Declaration public static readonly Ulid MaxValue Field Value Type Description Ulid | Edit this page View Source MinValue Declaration public static readonly Ulid MinValue Field Value Type Description Ulid Properties | Edit this page View Source Random Declaration [IgnoreDataMember] public byte[] Random { get; } Property Value Type Description byte[] | Edit this page View Source Time Declaration [IgnoreDataMember] public DateTimeOffset Time { get; } Property Value Type Description DateTimeOffset Methods | Edit this page View Source CompareTo(Ulid) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Ulid other) Parameters Type Name Description Ulid other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source Equals(Ulid) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Ulid other) Parameters Type Name Description Ulid other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source NewUlid() Declaration public static Ulid NewUlid() Returns Type Description Ulid | Edit this page View Source NewUlid(DateTimeOffset) Declaration public static Ulid NewUlid(DateTimeOffset timestamp) Parameters Type Name Description DateTimeOffset timestamp Returns Type Description Ulid | Edit this page View Source NewUlid(DateTimeOffset, ReadOnlySpan<byte>) Declaration public static Ulid NewUlid(DateTimeOffset timestamp, ReadOnlySpan<byte> randomness) Parameters Type Name Description DateTimeOffset timestamp ReadOnlySpan<byte> randomness Returns Type Description Ulid | Edit this page View Source Parse(ReadOnlySpan<byte>) Declaration public static Ulid Parse(ReadOnlySpan<byte> base32) Parameters Type Name Description ReadOnlySpan<byte> base32 Returns Type Description Ulid | Edit this page View Source Parse(ReadOnlySpan<char>) Declaration public static Ulid Parse(ReadOnlySpan<char> base32) Parameters Type Name Description ReadOnlySpan<char> base32 Returns Type Description Ulid | Edit this page View Source Parse(string) Declaration public static Ulid Parse(string base32) Parameters Type Name Description string base32 Returns Type Description Ulid | Edit this page View Source ToBase64(Base64FormattingOptions) Declaration public string ToBase64(Base64FormattingOptions options = Base64FormattingOptions.None) Parameters Type Name Description Base64FormattingOptions options Returns Type Description string | Edit this page View Source ToByteArray() Declaration public byte[] ToByteArray() Returns Type Description byte[] | Edit this page View Source ToGuid() Convert this Ulid value to a Guid value with the same comparability. Declaration public Guid ToGuid() Returns Type Description Guid The converted Guid value Remarks The byte arrangement between Ulid and Guid is not preserved. | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source TryParse(ReadOnlySpan<byte>, out Ulid) Declaration public static bool TryParse(ReadOnlySpan<byte> base32, out Ulid ulid) Parameters Type Name Description ReadOnlySpan<byte> base32 Ulid ulid Returns Type Description bool | Edit this page View Source TryParse(ReadOnlySpan<char>, out Ulid) Declaration public static bool TryParse(ReadOnlySpan<char> base32, out Ulid ulid) Parameters Type Name Description ReadOnlySpan<char> base32 Ulid ulid Returns Type Description bool | Edit this page View Source TryParse(string, out Ulid) Declaration public static bool TryParse(string base32, out Ulid ulid) Parameters Type Name Description string base32 Ulid ulid Returns Type Description bool | Edit this page View Source TryWriteBytes(Span<byte>) Declaration public bool TryWriteBytes(Span<byte> destination) Parameters Type Name Description Span<byte> destination Returns Type Description bool | Edit this page View Source TryWriteStringify(Span<byte>) Declaration public bool TryWriteStringify(Span<byte> span) Parameters Type Name Description Span<byte> span Returns Type Description bool | Edit this page View Source TryWriteStringify(Span<char>) Declaration public bool TryWriteStringify(Span<char> span) Parameters Type Name Description Span<char> span Returns Type Description bool Operators | Edit this page View Source operator ==(Ulid, Ulid) Declaration public static bool operator ==(Ulid a, Ulid b) Parameters Type Name Description Ulid a Ulid b Returns Type Description bool | Edit this page View Source operator !=(Ulid, Ulid) Declaration public static bool operator !=(Ulid a, Ulid b) Parameters Type Name Description Ulid a Ulid b Returns Type Description bool Implements IEquatable<T> IComparable<T> Extension Methods Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Identifier.UlidJsonConverter.html": {
    "href": "api/Yolu.Identifier.UlidJsonConverter.html",
    "title": "Class UlidJsonConverter | Yolu",
    "keywords": "Class UlidJsonConverter Inheritance object JsonConverter JsonConverter<Ulid> UlidJsonConverter Inherited Members JsonConverter<Ulid>.CanConvert(Type) JsonConverter<Ulid>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Ulid>.WriteAsPropertyName(Utf8JsonWriter, Ulid, JsonSerializerOptions) JsonConverter<Ulid>.HandleNull JsonConverter<Ulid>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Identifier Assembly: Yolu.dll Syntax public class UlidJsonConverter : JsonConverter<Ulid> Methods | Edit this page View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Read a Ulid value represented by a string from JSON. Declaration public override Ulid Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description Ulid Overrides JsonConverter<Ulid>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) | Edit this page View Source Write(Utf8JsonWriter, Ulid, JsonSerializerOptions) Writes a specified value as JSON. Declaration public override void Write(Utf8JsonWriter writer, Ulid value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The writer to write to. Ulid value The value to convert to JSON. JsonSerializerOptions options An object that specifies serialization options to use. Overrides JsonConverter<Ulid>.Write(Utf8JsonWriter, Ulid, JsonSerializerOptions) Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Identifier.UlidTypeConverter.html": {
    "href": "api/Yolu.Identifier.UlidTypeConverter.html",
    "title": "Class UlidTypeConverter | Yolu",
    "keywords": "Class UlidTypeConverter Inheritance object TypeConverter UlidTypeConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.ConvertFrom(object) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, string) TypeConverter.ConvertFromInvariantString(string) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, string) TypeConverter.ConvertFromString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(string) TypeConverter.ConvertTo(object, Type) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, object) TypeConverter.ConvertToInvariantString(object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, object) TypeConverter.ConvertToString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(object) TypeConverter.GetConvertToException(object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(ITypeDescriptorContext, object) TypeConverter.GetProperties(ITypeDescriptorContext, object, Attribute[]) TypeConverter.GetProperties(object) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(ITypeDescriptorContext, object) TypeConverter.IsValid(object) TypeConverter.SortProperties(PropertyDescriptorCollection, string[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Identifier Assembly: Yolu.dll Syntax public class UlidTypeConverter : TypeConverter Methods | Edit this page View Source CanConvertFrom(ITypeDescriptorContext?, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description bool true if this converter can perform the conversion; otherwise, false. Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) | Edit this page View Source CanConvertTo(ITypeDescriptorContext?, Type?) Returns whether this converter can convert the object to the specified type, using the specified context. Declaration public override bool CanConvertTo(ITypeDescriptorContext? context, Type? destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type destinationType A Type that represents the type you want to convert to. Returns Type Description bool true if this converter can perform the conversion; otherwise, false. Overrides TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) | Edit this page View Source ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. object value The object to convert. Returns Type Description object An object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, object) Exceptions Type Condition NotSupportedException The conversion cannot be performed. | Edit this page View Source ConvertTo(ITypeDescriptorContext?, CultureInfo?, object?, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo. If null is passed, the current culture is assumed. object value The object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description object An object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, object, Type) Exceptions Type Condition ArgumentNullException The destinationType parameter is null. NotSupportedException The conversion cannot be performed. Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Identifier.html": {
    "href": "api/Yolu.Identifier.html",
    "title": "Namespace Yolu.Identifier | Yolu",
    "keywords": "Namespace Yolu.Identifier Classes PrefixedUlid UlidJsonConverter UlidTypeConverter Structs Ulid Represents a Universally Unique Lexicographically Sortable Identifier (ULID). Spec: https://github.com/ulid/spec"
  },
  "api/Yolu.LibrarySettings.html": {
    "href": "api/Yolu.LibrarySettings.html",
    "title": "Class LibrarySettings | Yolu",
    "keywords": "Class LibrarySettings Inheritance object LibrarySettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public class LibrarySettings Properties | Edit this page View Source DisableNativeAllocation Declaration public static bool DisableNativeAllocation { get; } Property Value Type Description bool | Edit this page View Source DisableRandomStringInternalBufferCleanup Declaration public static bool DisableRandomStringInternalBufferCleanup { get; } Property Value Type Description bool | Edit this page View Source StackallocThreshold Declaration public static int StackallocThreshold { get; } Property Value Type Description int Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Linq.WithIndexExtension.html": {
    "href": "api/Yolu.Linq.WithIndexExtension.html",
    "title": "Class WithIndexExtension | Yolu",
    "keywords": "Class WithIndexExtension Inheritance object WithIndexExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Linq Assembly: Yolu.dll Syntax public static class WithIndexExtension Methods | Edit this page View Source WithIndex<T>(IEnumerable<T>) Declaration public static IEnumerable<(T Value, int Index)> WithIndex<T>(this IEnumerable<T> sequence) Parameters Type Name Description IEnumerable<T> sequence Returns Type Description IEnumerable<(T Value, int Index)> Type Parameters Name Description T"
  },
  "api/Yolu.Linq.html": {
    "href": "api/Yolu.Linq.html",
    "title": "Namespace Yolu.Linq | Yolu",
    "keywords": "Namespace Yolu.Linq Classes WithIndexExtension"
  },
  "api/Yolu.Logging.ILogger.html": {
    "href": "api/Yolu.Logging.ILogger.html",
    "title": "Interface ILogger | Yolu",
    "keywords": "Interface ILogger Namespace: Yolu.Logging Assembly: Yolu.dll Syntax public interface ILogger Methods | Edit this page View Source BeginScope<TState>(TState) Begins a logical operation scope. Declaration IDisposable? BeginScope<TState>(TState state) where TState : notnull Parameters Type Name Description TState state The identifier for the scope. Returns Type Description IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState The type of the state to begin scope for. | Edit this page View Source IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Level to be checked. Returns Type Description bool true if enabled. | Edit this page View Source Log<TState>(LogLevel, PrefixedUlid, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry. Declaration void Log<TState>(LogLevel logLevel, PrefixedUlid eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. PrefixedUlid eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func<TState, Exception, string> formatter Function to create a string message of the state and exception. Type Parameters Name Description TState The type of the object to be written. Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Logging.LogLevel.html": {
    "href": "api/Yolu.Logging.LogLevel.html",
    "title": "Enum LogLevel | Yolu",
    "keywords": "Enum LogLevel Defines logging severity levels. Namespace: Yolu.Logging Assembly: Yolu.dll Syntax public enum LogLevel Fields Name Description Critical Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention. Debug Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure. Information Logs that track the general flow of the application. These logs should have long-term value. None Not used for writing log messages. Specifies that a logging category should not write any messages. Trace Logs that contain the most detailed messages. These messages may contain sensitive application data. These messages are disabled by default and should never be enabled in a production environment. Warning Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop. Extension Methods EnumUtils.CastTo<TEnum>(Enum, bool) EnumUtils.ToDisplayName(Enum) Enumerator.Skip<LogLevel, T>(ref LogLevel, int) TaskUtils.AsTask<LogLevel>(LogLevel) TaskUtils.AsValueTask<LogLevel>(LogLevel)"
  },
  "api/Yolu.Logging.html": {
    "href": "api/Yolu.Logging.html",
    "title": "Namespace Yolu.Logging | Yolu",
    "keywords": "Namespace Yolu.Logging Interfaces ILogger Enums LogLevel Defines logging severity levels."
  },
  "api/Yolu.Numerics.NumberUtils.html": {
    "href": "api/Yolu.Numerics.NumberUtils.html",
    "title": "Class NumberUtils | Yolu",
    "keywords": "Class NumberUtils Represents Generic Math extensions. Inheritance object NumberUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Numerics Assembly: Yolu.dll Syntax public static class NumberUtils Methods | Edit this page View Source GetMaxByteCount<T>() Gets maximum number of bytes that can be used by T type when encoded in little-endian or big-endian format. Declaration public static int GetMaxByteCount<T>() where T : notnull, IBinaryInteger<T> Returns Type Description int The maximum numbers bytes that can be occupied by the value of T. Type Parameters Name Description T The integer type to check. | Edit this page View Source IsSigned<T>() Determines whether the specified numeric type is signed. Declaration public static bool IsSigned<T>() where T : notnull, INumberBase<T> Returns Type Description bool true if T is a signed numeric type; otherwise, false. Type Parameters Name Description T The type to check. | Edit this page View Source Normalize(int) Normalizes 32-bit signed integer to interval [0..1). Declaration public static float Normalize(this int value) Parameters Type Name Description int value The value to be normalized. Returns Type Description float The normalized value in range [0..1). | Edit this page View Source Normalize(long) Normalizes 64-bit signed integer to interval [0..1). Declaration public static double Normalize(this long value) Parameters Type Name Description long value The value to be normalized. Returns Type Description double The normalized value in range [0..1). | Edit this page View Source Normalize(uint) Normalizes 32-bit unsigned integer to interval [0..1). Declaration public static float Normalize(this uint value) Parameters Type Name Description uint value The value to be normalized. Returns Type Description float The normalized value in range [0..1). | Edit this page View Source Normalize(ulong) Normalizes 64-bit unsigned integer to interval [0..1). Declaration public static double Normalize(this ulong value) Parameters Type Name Description ulong value The value to be normalized. Returns Type Description double The normalized value in range [0..1). | Edit this page View Source Normalize<TInput, TOutput>(TInput, TInput, TInput) Normalizes value in the specified range. Declaration public static TOutput Normalize<TInput, TOutput>(this TInput value, TInput min, TInput max) where TInput : struct, INumberBase<TInput>, IComparisonOperators<TInput, TInput, bool> where TOutput : struct, IFloatingPoint<TOutput> Parameters Type Name Description TInput value The value to be normalized. Must be in range [min..max]. TInput min The lower bound of the value. TInput max The upper bound of the value. Returns Type Description TOutput The normalized value in range [-1..1] for signed value and [0..1] for unsigned value. Type Parameters Name Description TInput The type of the input value and bounds. TOutput The type of normalized value."
  },
  "api/Yolu.Numerics.html": {
    "href": "api/Yolu.Numerics.html",
    "title": "Namespace Yolu.Numerics | Yolu",
    "keywords": "Namespace Yolu.Numerics Classes NumberUtils Represents Generic Math extensions."
  },
  "api/Yolu.Observer-1.html": {
    "href": "api/Yolu.Observer-1.html",
    "title": "Struct Observer<T> | Yolu",
    "keywords": "Struct Observer<T> Implements IObserver<T> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu Assembly: Yolu.dll Syntax public readonly struct Observer<T> : IObserver<T> Type Parameters Name Description T Constructors | Edit this page View Source Observer(Action<T>, Action<Exception>?, Action?) Declaration public Observer(Action<T> onNext, Action<Exception>? onError = null, Action? onCompleted = null) Parameters Type Name Description Action<T> onNext Action<Exception> onError Action onCompleted Methods | Edit this page View Source OnCompleted() Notifies the observer that the provider has finished sending push-based notifications. Declaration public void OnCompleted() | Edit this page View Source OnError(Exception) Notifies the observer that the provider has experienced an error condition. Declaration public void OnError(Exception error) Parameters Type Name Description Exception error The error that occurred. | Edit this page View Source OnNext(T) Provides the observer with new data. Declaration public void OnNext(T value) Parameters Type Name Description T value The current notification information. Implements IObserver<T> Extension Methods Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Pipeline-1.html": {
    "href": "api/Yolu.Pipeline-1.html",
    "title": "Struct Pipeline<T> | Yolu",
    "keywords": "Struct Pipeline<T> Represents Express functional programming-like pipeline operators with method chains Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Yolu Assembly: Yolu.dll Syntax public readonly struct Pipeline<T> Type Parameters Name Description T The type of the value. Remarks Initializes a new instance of the Pipeline<T> struct. Constructors | Edit this page View Source Pipeline(Func<T>) Represents Express functional programming-like pipeline operators with method chains Declaration public Pipeline(Func<T> func) Parameters Type Name Description Func<T> func The value selector. Remarks Initializes a new instance of the Pipeline<T> struct. Methods | Edit this page View Source Action(Action<T>) Executes the specified action on the value. Declaration public Pipeline<T> Action(Action<T> func) Parameters Type Name Description Action<T> func The action. Returns Type Description Pipeline<T> The pipeline instance. | Edit this page View Source Execute() Executes the pipeline and returns the result. Declaration public T Execute() Returns Type Description T The result of the pipeline. | Edit this page View Source PipeAsync<U>(Func<T, Task<U>>) Pipes the value through the specified async function. Declaration public AsyncPipeline<U> PipeAsync<U>(Func<T, Task<U>> func) Parameters Type Name Description Func<T, Task<U>> func The async function. Returns Type Description AsyncPipeline<U> The async pipeline instance. Type Parameters Name Description U The type of the result. | Edit this page View Source Pipe<U>(Func<T, U>) Pipes the value through the specified function. Declaration public Pipeline<U> Pipe<U>(Func<T, U> func) Parameters Type Name Description Func<T, U> func The function. Returns Type Description Pipeline<U> The pipeline instance. Type Parameters Name Description U The type of the result. Extension Methods Enumerator.Skip<TEnumerator, T>(ref TEnumerator, int) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Pipeline.html": {
    "href": "api/Yolu.Pipeline.html",
    "title": "Class Pipeline | Yolu",
    "keywords": "Class Pipeline Represents Express functional programming-like pipeline operators with method chains Inheritance object Pipeline Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public static class Pipeline Methods | Edit this page View Source Create<U>(Func<Task<U>>) Declaration public static AsyncPipeline<U> Create<U>(Func<Task<U>> func) Parameters Type Name Description Func<Task<U>> func Returns Type Description AsyncPipeline<U> Type Parameters Name Description U | Edit this page View Source Create<U>(Func<U>) Declaration public static Pipeline<U> Create<U>(Func<U> func) Parameters Type Name Description Func<U> func Returns Type Description Pipeline<U> Type Parameters Name Description U | Edit this page View Source Create<U>(U) Declaration public static Pipeline<U> Create<U>(U value) Parameters Type Name Description U value Returns Type Description Pipeline<U> Type Parameters Name Description U | Edit this page View Source Pipe<T>(Func<T>) Declaration public static Pipeline<T> Pipe<T>(Func<T> func) Parameters Type Name Description Func<T> func Returns Type Description Pipeline<T> Type Parameters Name Description T"
  },
  "api/Yolu.Randoms.RandomUtils.html": {
    "href": "api/Yolu.Randoms.RandomUtils.html",
    "title": "Class RandomUtils | Yolu",
    "keywords": "Class RandomUtils Utility class for generating random values. Inheritance object RandomUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Randoms Assembly: Yolu.dll Syntax public static class RandomUtils Fields | Edit this page View Source Chars The characters used for generating random strings. Declaration public const string Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" Field Value Type Description string Methods | Edit this page View Source GetItems<T>(Random, Span<T>) Fills the buffer with random values of the specified type. Declaration public static void GetItems<T>(this Random random, Span<T> buffer) where T : unmanaged Parameters Type Name Description Random random The source of random numbers. Span<T> buffer The buffer to fill with random values. Type Parameters Name Description T The blittable type. Exceptions Type Condition ArgumentNullException random is null. | Edit this page View Source GetItems<T>(RandomNumberGenerator, Span<T>) Fills the buffer with random values of the specified type. Declaration public static void GetItems<T>(this RandomNumberGenerator random, Span<T> buffer) where T : unmanaged Parameters Type Name Description RandomNumberGenerator random The source of random numbers. Span<T> buffer The buffer to fill with random values. Type Parameters Name Description T The blittable type. Exceptions Type Condition ArgumentNullException random is null. | Edit this page View Source Next(RandomNumberGenerator) Generates non-negative integer. Declaration public static int Next(this RandomNumberGenerator random) Parameters Type Name Description RandomNumberGenerator random The source of random numbers. Returns Type Description int A 32-bit signed integer that is in range [0, MaxValue). | Edit this page View Source NextBool(Random) Generates a random boolean value. Declaration [Pure] public static bool NextBool(this Random random) Parameters Type Name Description Random random The random number generator. Returns Type Description bool A random boolean value. | Edit this page View Source NextBoolean(Random, double) Generates a random boolean value. Declaration public static bool NextBoolean(this Random random, double trueProbability = 0.5) Parameters Type Name Description Random random The source of random numbers. double trueProbability A probability of true result (should be between 0.0 and 1.0). Returns Type Description bool Randomly generated boolean value. Exceptions Type Condition ArgumentOutOfRangeException trueProbability value is invalid. | Edit this page View Source NextBoolean(RandomNumberGenerator, double) Generates a random boolean value. Declaration public static bool NextBoolean(this RandomNumberGenerator random, double trueProbability = 0.5) Parameters Type Name Description RandomNumberGenerator random The source of random numbers. double trueProbability A probability of true result (should be between 0.0 and 1.0). Returns Type Description bool Randomly generated boolean value. Exceptions Type Condition ArgumentOutOfRangeException trueProbability value is invalid. | Edit this page View Source NextChars(Random, ReadOnlySpan<char>, Span<char>) Generates a random set of characters. Declaration public static void NextChars(this Random random, ReadOnlySpan<char> allowedChars, Span<char> buffer) Parameters Type Name Description Random random The source of random numbers. ReadOnlySpan<char> allowedChars The allowed characters for the random string. Span<char> buffer The array to be filled with random characters. Exceptions Type Condition ArgumentNullException random is null. | Edit this page View Source NextChars(RandomNumberGenerator, ReadOnlySpan<char>, Span<char>) Generates a random set of characters. Declaration public static void NextChars(this RandomNumberGenerator random, ReadOnlySpan<char> allowedChars, Span<char> buffer) Parameters Type Name Description RandomNumberGenerator random The source of random numbers. ReadOnlySpan<char> allowedChars The allowed characters for the random string. Span<char> buffer The array to be filled with random characters. Exceptions Type Condition ArgumentNullException random is null. | Edit this page View Source NextDateOnly(Random, DateOnly, DateOnly) Generates a random DateTime value between the specified start and end dates. Declaration [Pure] public static DateOnly NextDateOnly(this Random random, DateOnly startDate, DateOnly endDate) Parameters Type Name Description Random random The random number generator. DateOnly startDate The start date. DateOnly endDate The end date. Returns Type Description DateOnly A random DateTime value between the start and end dates. | Edit this page View Source NextDateTime(Random, DateTime, DateTime) Generates a random DateTime value between the specified start and end dates. Declaration [Pure] public static DateTime NextDateTime(this Random random, DateTime startDate, DateTime endDate) Parameters Type Name Description Random random The random number generator. DateTime startDate The start date. DateTime endDate The end date. Returns Type Description DateTime A random DateTime value between the start and end dates. | Edit this page View Source NextDouble(Random, double, double) Generates a random double value between the specified minimum and maximum values. Declaration [Pure] public static double NextDouble(this Random random, double minValue, double maxValue) Parameters Type Name Description Random random The random number generator. double minValue The minimum value. double maxValue The maximum value. Returns Type Description double A random double value between the minimum and maximum values. | Edit this page View Source NextDouble(RandomNumberGenerator) Returns a random floating-point number that is in range [0, 1). Declaration public static double NextDouble(this RandomNumberGenerator random) Parameters Type Name Description RandomNumberGenerator random The source of random numbers. Returns Type Description double Randomly generated floating-point number. | Edit this page View Source NextFloat(Random, float, float) Generates a random float value between the specified minimum and maximum values. Declaration [Pure] public static float NextFloat(this Random random, float minValue, float maxValue) Parameters Type Name Description Random random The random number generator. float minValue The minimum value. float maxValue The maximum value. Returns Type Description float A random float value between the minimum and maximum values. | Edit this page View Source NextGuid(Random) Generates a random Guid value. Declaration [Pure] public static Guid NextGuid(this Random random) Parameters Type Name Description Random random The random number generator. Returns Type Description Guid A random Guid value. | Edit this page View Source NextInt(Random, int, int) Generates a random integer value between the specified minimum and maximum values. Declaration [Pure] public static int NextInt(this Random random, int minValue, int maxValue) Parameters Type Name Description Random random The random number generator. int minValue The minimum value. int maxValue The maximum value. Returns Type Description int A random integer value between the minimum and maximum values. | Edit this page View Source NextLong(Random, long, long) Generates a random long value between the specified minimum and maximum values. Declaration [Pure] public static long NextLong(this Random random, long minValue, long maxValue) Parameters Type Name Description Random random The random number generator. long minValue The minimum value. long maxValue The maximum value. Returns Type Description long A random long value between the minimum and maximum values. | Edit this page View Source NextString(Random, int) Generates a random string of the specified length. Declaration [Pure] public static string NextString(this Random random, int length) Parameters Type Name Description Random random The random number generator. int length The length of the string. Returns Type Description string A random string of the specified length. | Edit this page View Source NextString(Random, ReadOnlySpan<char>, int) Generates a random string of the given length. Declaration public static string NextString(this Random random, ReadOnlySpan<char> allowedChars, int length) Parameters Type Name Description Random random The source of random numbers. ReadOnlySpan<char> allowedChars The allowed characters for the random string. int length The length of the random string. Returns Type Description string Randomly generated string. Exceptions Type Condition ArgumentNullException random is null. ArgumentOutOfRangeException length is less than zero. | Edit this page View Source NextString(Random, string, int) Generates a random string of the given length. Declaration public static string NextString(this Random random, string allowedChars, int length) Parameters Type Name Description Random random The source of random numbers. string allowedChars The string of allowed characters for the random string. int length The length of the random string. Returns Type Description string Randomly generated string. Exceptions Type Condition ArgumentNullException random is null. ArgumentOutOfRangeException length is less than zero. | Edit this page View Source NextString(RandomNumberGenerator, ReadOnlySpan<char>, int) Generates a random string of the given length. Declaration public static string NextString(this RandomNumberGenerator random, ReadOnlySpan<char> allowedChars, int length) Parameters Type Name Description RandomNumberGenerator random The source of random numbers. ReadOnlySpan<char> allowedChars The allowed characters for the random string. int length The length of the random string. Returns Type Description string Randomly generated string. Exceptions Type Condition ArgumentNullException random is null. ArgumentOutOfRangeException length is less than zero. | Edit this page View Source NextString(RandomNumberGenerator, string, int) Generates a random string of the given length. Declaration public static string NextString(this RandomNumberGenerator random, string allowedChars, int length) Parameters Type Name Description RandomNumberGenerator random The source of random numbers. string allowedChars The string of allowed characters for the random string. int length The length of the random string. Returns Type Description string Randomly generated string. Exceptions Type Condition ArgumentNullException random is null. ArgumentOutOfRangeException length is less than zero. | Edit this page View Source NextTimeOnly(Random, TimeOnly, TimeOnly) Declaration [Pure] public static TimeOnly NextTimeOnly(this Random random, TimeOnly minValue, TimeOnly maxValue) Parameters Type Name Description Random random TimeOnly minValue The minimum value. TimeOnly maxValue The maximum value. Returns Type Description TimeOnly A random TimeOnly value between the minimum and maximum values. | Edit this page View Source NextTimeSpan(Random, TimeSpan, TimeSpan) Generates a random TimeSpan value between the specified minimum and maximum values. Declaration [Pure] public static TimeSpan NextTimeSpan(this Random random, TimeSpan minValue, TimeSpan maxValue) Parameters Type Name Description Random random The random number generator. TimeSpan minValue The minimum value. TimeSpan maxValue The maximum value. Returns Type Description TimeSpan A random TimeSpan value between the minimum and maximum values. | Edit this page View Source Next<T>(Random) Generates a random value of blittable type. Declaration public static T Next<T>(this Random random) where T : unmanaged Parameters Type Name Description Random random The source of random numbers. Returns Type Description T The randomly generated value. Type Parameters Name Description T The blittable type. | Edit this page View Source Next<T>(RandomNumberGenerator) Generates a random value of blittable type. Declaration public static T Next<T>(this RandomNumberGenerator random) where T : unmanaged Parameters Type Name Description RandomNumberGenerator random The source of random numbers. Returns Type Description T The randomly generated value. Type Parameters Name Description T The blittable type. | Edit this page View Source Shuffle<T>(Random, IList<T>) Randomizes elements in the list. Declaration public static void Shuffle<T>(this Random random, IList<T> list) Parameters Type Name Description Random random The source of random values. IList<T> list The list to shuffle. Type Parameters Name Description T The type of items in the list. | Edit this page View Source TakeOne<T>(Random, IReadOnlyList<T>) Takes a random item from the given list. Declaration [Pure] public static T TakeOne<T>(this Random random, IReadOnlyList<T> items) Parameters Type Name Description Random random The random number generator. IReadOnlyList<T> items The list of items. Returns Type Description T A random item from the list. Type Parameters Name Description T The type of items in the list. | Edit this page View Source Take<T>(Random, IReadOnlyList<T>, int) Takes a specified number of random items from the given list. Declaration [Pure] public static IReadOnlyList<T> Take<T>(this Random random, IReadOnlyList<T> items, int count) Parameters Type Name Description Random random The random number generator. IReadOnlyList<T> items The list of items. int count The number of items to take. Returns Type Description IReadOnlyList<T> A list of random items from the list. Type Parameters Name Description T The type of items in the list."
  },
  "api/Yolu.Randoms.html": {
    "href": "api/Yolu.Randoms.html",
    "title": "Namespace Yolu.Randoms | Yolu",
    "keywords": "Namespace Yolu.Randoms Classes RandomUtils Utility class for generating random values."
  },
  "api/Yolu.RefAction-2.html": {
    "href": "api/Yolu.RefAction-2.html",
    "title": "Delegate RefAction<T, TArgs> | Yolu",
    "keywords": "Delegate RefAction<T, TArgs> Represents action that accepts arbitrary value by reference. Namespace: Yolu Assembly: Yolu.dll Syntax public delegate void RefAction<T, in TArgs>(ref T reference, TArgs args) Parameters Type Name Description T reference The object passed by reference. TArgs args The action arguments. Type Parameters Name Description T The type of the object to be passed by reference into the action. TArgs The type of the arguments to be passed into the action. Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Subject-1.html": {
    "href": "api/Yolu.Subject-1.html",
    "title": "Class Subject<T> | Yolu",
    "keywords": "Class Subject<T> Represents a subject that both observes and provides notifications. Inheritance object Subject<T> Implements IObservable<T> IObserver<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public class Subject<T> : IObservable<T>, IObserver<T> Type Parameters Name Description T The type of the elements being observed. Methods | Edit this page View Source OnCompleted() Notifies all subscribed observers that the provider has finished sending push-based notifications. Declaration public void OnCompleted() | Edit this page View Source OnError(Exception) Notifies all subscribed observers that the provider has experienced an error condition. Declaration public void OnError(Exception error) Parameters Type Name Description Exception error An object that provides additional information about the error. | Edit this page View Source OnNext(T) Notifies all subscribed observers with a new value. Declaration public void OnNext(T value) Parameters Type Name Description T value The new value. | Edit this page View Source Subscribe(Action<T>) Subscribes an action to the subject. Declaration public IDisposable Subscribe(Action<T> action) Parameters Type Name Description Action<T> action The action to subscribe. Returns Type Description IDisposable A disposable object that can be used to unsubscribe the action. | Edit this page View Source Subscribe(IObserver<T>) Subscribes an observer to the subject. Declaration public IDisposable Subscribe(IObserver<T> observer) Parameters Type Name Description IObserver<T> observer The observer to subscribe. Returns Type Description IDisposable A disposable object that can be used to unsubscribe the observer. Implements IObservable<T> IObserver<T> Extension Methods SubscriberExtensions.Subscribe<T>(IObservable<T>, Action<T>, Action<Exception>?, Action?) TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.SubscriberExtensions.html": {
    "href": "api/Yolu.SubscriberExtensions.html",
    "title": "Class SubscriberExtensions | Yolu",
    "keywords": "Class SubscriberExtensions Inheritance object SubscriberExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public static class SubscriberExtensions Methods | Edit this page View Source Subscribe<T>(IObservable<T>, Action<T>, Action<Exception>?, Action?) Subscribes an action to the subject. Declaration public static IDisposable Subscribe<T>(this IObservable<T> observable, Action<T> onNext, Action<Exception>? onError = null, Action? onComplete = null) Parameters Type Name Description IObservable<T> observable The observable sequence to subscribe to. Action<T> onNext The action to invoke for each element in the observable sequence. Action<Exception> onError The action to invoke upon exceptional termination of the observable sequence. Action onComplete The action to invoke upon graceful termination of the observable sequence. Returns Type Description IDisposable A disposable object that can be used to unsubscribe the action. Type Parameters Name Description T The type of elements in the observable sequence."
  },
  "api/Yolu.Tasks.TaskUtils.html": {
    "href": "api/Yolu.Tasks.TaskUtils.html",
    "title": "Class TaskUtils | Yolu",
    "keywords": "Class TaskUtils Utility methods for working with tasks. Inheritance object TaskUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Tasks Assembly: Yolu.dll Syntax public static class TaskUtils Methods | Edit this page View Source AsTask<T>(T) Converts the specified object to a Task<TResult>. Declaration public static Task<T> AsTask<T>(this T obj) Parameters Type Name Description T obj The object to convert. Returns Type Description Task<T> A Task<TResult> representing the specified object. Type Parameters Name Description T The type of the object. | Edit this page View Source AsValueTask<T>(T) Converts the specified object to a ValueTask<TResult>. Declaration public static ValueTask<T> AsValueTask<T>(this T obj) Parameters Type Name Description T obj The object to convert. Returns Type Description ValueTask<T> A ValueTask<TResult> representing the specified object. Type Parameters Name Description T The type of the object. | Edit this page View Source CreateTask(Action<Action, Action<Exception>>, CancellationToken) Creates a task with the specified initialization action and cancellation token. Declaration public static Task CreateTask(Action<Action, Action<Exception>> initialize, CancellationToken token = default) Parameters Type Name Description Action<Action, Action<Exception>> initialize The initialization action that sets the result or exception of the task. CancellationToken token The cancellation token used to cancel the task. Returns Type Description Task The created task. | Edit this page View Source CreateTask<T>(Action<Action<T>, Action<Exception>>, CancellationToken) Creates a task with the specified initialization action, cancellation token, and result type. Declaration public static Task<T> CreateTask<T>(Action<Action<T>, Action<Exception>> initialize, CancellationToken token = default) Parameters Type Name Description Action<Action<T>, Action<Exception>> initialize The initialization action that sets the result or exception of the task. CancellationToken token The cancellation token used to cancel the task. Returns Type Description Task<T> The created task. Type Parameters Name Description T The type of the task result. | Edit this page View Source WhenAll<T>(Task<T>) Waits for the completion of a single task. Declaration public static Task<T> WhenAll<T>(Task<T> task) Parameters Type Name Description Task<T> task The task to wait for. Returns Type Description Task<T> The completed task. Type Parameters Name Description T The type of the task result. | Edit this page View Source WhenAll<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>, Task<T8>, Task<T9>, Task<T10>) Waits for the completion of ten tasks. Declaration public static Task<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> WhenAll<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5, Task<T6> task6, Task<T7> task7, Task<T8> task8, Task<T9> task9, Task<T10> task10) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Task<T5> task5 The fifth task to wait for. Task<T6> task6 The sixth task to wait for. Task<T7> task7 The seventh task to wait for. Task<T8> task8 The eighth task to wait for. Task<T9> task9 The ninth task to wait for. Task<T10> task10 The tenth task to wait for. Returns Type Description Task<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> A tuple containing the results of the ten tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. T5 The type of the fifth task result. T6 The type of the sixth task result. T7 The type of the seventh task result. T8 The type of the eighth task result. T9 The type of the ninth task result. T10 The type of the tenth task result. | Edit this page View Source WhenAll<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>, Task<T8>, Task<T9>, Task<T10>, Task<T11>) Waits for the completion of eleven tasks. Declaration public static Task<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> WhenAll<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5, Task<T6> task6, Task<T7> task7, Task<T8> task8, Task<T9> task9, Task<T10> task10, Task<T11> task11) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Task<T5> task5 The fifth task to wait for. Task<T6> task6 The sixth task to wait for. Task<T7> task7 The seventh task to wait for. Task<T8> task8 The eighth task to wait for. Task<T9> task9 The ninth task to wait for. Task<T10> task10 The tenth task to wait for. Task<T11> task11 The eleventh task to wait for. Returns Type Description Task<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> A tuple containing the results of the eleven tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. T5 The type of the fifth task result. T6 The type of the sixth task result. T7 The type of the seventh task result. T8 The type of the eighth task result. T9 The type of the ninth task result. T10 The type of the tenth task result. T11 The type of the eleventh task result. | Edit this page View Source WhenAll<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>, Task<T8>, Task<T9>, Task<T10>, Task<T11>, Task<T12>) Waits for the completion of twelve tasks. Declaration public static Task<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> WhenAll<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5, Task<T6> task6, Task<T7> task7, Task<T8> task8, Task<T9> task9, Task<T10> task10, Task<T11> task11, Task<T12> task12) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Task<T5> task5 The fifth task to wait for. Task<T6> task6 The sixth task to wait for. Task<T7> task7 The seventh task to wait for. Task<T8> task8 The eighth task to wait for. Task<T9> task9 The ninth task to wait for. Task<T10> task10 The tenth task to wait for. Task<T11> task11 The eleventh task to wait for. Task<T12> task12 The twelfth task to wait for. Returns Type Description Task<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> A tuple containing the results of the twelve tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. T5 The type of the fifth task result. T6 The type of the sixth task result. T7 The type of the seventh task result. T8 The type of the eighth task result. T9 The type of the ninth task result. T10 The type of the tenth task result. T11 The type of the eleventh task result. T12 The type of the twelfth task result. | Edit this page View Source WhenAll<T1, T2>(Task<T1>, Task<T2>) Waits for the completion of two tasks. Declaration public static Task<(T1, T2)> WhenAll<T1, T2>(Task<T1> task1, Task<T2> task2) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Returns Type Description Task<(T1, T2)> A tuple containing the results of the two tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. | Edit this page View Source WhenAll<T1, T2, T3>(Task<T1>, Task<T2>, Task<T3>) Waits for the completion of three tasks. Declaration public static Task<(T1, T2, T3)> WhenAll<T1, T2, T3>(Task<T1> task1, Task<T2> task2, Task<T3> task3) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Returns Type Description Task<(T1, T2, T3)> A tuple containing the results of the three tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. | Edit this page View Source WhenAll<T1, T2, T3, T4>(Task<T1>, Task<T2>, Task<T3>, Task<T4>) Waits for the completion of four tasks. Declaration public static Task<(T1, T2, T3, T4)> WhenAll<T1, T2, T3, T4>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Returns Type Description Task<(T1, T2, T3, T4)> A tuple containing the results of the four tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. | Edit this page View Source WhenAll<T1, T2, T3, T4, T5>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>) Waits for the completion of five tasks. Declaration public static Task<(T1, T2, T3, T4, T5)> WhenAll<T1, T2, T3, T4, T5>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Task<T5> task5 The fifth task to wait for. Returns Type Description Task<(T1, T2, T3, T4, T5)> A tuple containing the results of the five tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. T5 The type of the fifth task result. | Edit this page View Source WhenAll<T1, T2, T3, T4, T5, T6>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>) Waits for the completion of six tasks. Declaration public static Task<(T1, T2, T3, T4, T5, T6)> WhenAll<T1, T2, T3, T4, T5, T6>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5, Task<T6> task6) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Task<T5> task5 The fifth task to wait for. Task<T6> task6 The sixth task to wait for. Returns Type Description Task<(T1, T2, T3, T4, T5, T6)> A tuple containing the results of the six tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. T5 The type of the fifth task result. T6 The type of the sixth task result. | Edit this page View Source WhenAll<T1, T2, T3, T4, T5, T6, T7>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>) Waits for the completion of seven tasks. Declaration public static Task<(T1, T2, T3, T4, T5, T6, T7)> WhenAll<T1, T2, T3, T4, T5, T6, T7>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5, Task<T6> task6, Task<T7> task7) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Task<T5> task5 The fifth task to wait for. Task<T6> task6 The sixth task to wait for. Task<T7> task7 The seventh task to wait for. Returns Type Description Task<(T1, T2, T3, T4, T5, T6, T7)> A tuple containing the results of the seven tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. T5 The type of the fifth task result. T6 The type of the sixth task result. T7 The type of the seventh task result. | Edit this page View Source WhenAll<T1, T2, T3, T4, T5, T6, T7, T8>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>, Task<T8>) Waits for the completion of eight tasks. Declaration public static Task<(T1, T2, T3, T4, T5, T6, T7, T8)> WhenAll<T1, T2, T3, T4, T5, T6, T7, T8>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5, Task<T6> task6, Task<T7> task7, Task<T8> task8) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Task<T5> task5 The fifth task to wait for. Task<T6> task6 The sixth task to wait for. Task<T7> task7 The seventh task to wait for. Task<T8> task8 The eighth task to wait for. Returns Type Description Task<(T1, T2, T3, T4, T5, T6, T7, T8)> A tuple containing the results of the eight tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. T5 The type of the fifth task result. T6 The type of the sixth task result. T7 The type of the seventh task result. T8 The type of the eighth task result. | Edit this page View Source WhenAll<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>, Task<T6>, Task<T7>, Task<T8>, Task<T9>) Waits for the completion of nine tasks. Declaration public static Task<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> WhenAll<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5, Task<T6> task6, Task<T7> task7, Task<T8> task8, Task<T9> task9) Parameters Type Name Description Task<T1> task1 The first task to wait for. Task<T2> task2 The second task to wait for. Task<T3> task3 The third task to wait for. Task<T4> task4 The fourth task to wait for. Task<T5> task5 The fifth task to wait for. Task<T6> task6 The sixth task to wait for. Task<T7> task7 The seventh task to wait for. Task<T8> task8 The eighth task to wait for. Task<T9> task9 The ninth task to wait for. Returns Type Description Task<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> A tuple containing the results of the nine tasks. Type Parameters Name Description T1 The type of the first task result. T2 The type of the second task result. T3 The type of the third task result. T4 The type of the fourth task result. T5 The type of the fifth task result. T6 The type of the sixth task result. T7 The type of the seventh task result. T8 The type of the eighth task result. T9 The type of the ninth task result."
  },
  "api/Yolu.Tasks.html": {
    "href": "api/Yolu.Tasks.html",
    "title": "Namespace Yolu.Tasks | Yolu",
    "keywords": "Namespace Yolu.Tasks Classes TaskUtils Utility methods for working with tasks."
  },
  "api/Yolu.Text.StringUtils.html": {
    "href": "api/Yolu.Text.StringUtils.html",
    "title": "Class StringUtils | Yolu",
    "keywords": "Class StringUtils Provides utility methods for working with strings. Inheritance object StringUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Text Assembly: Yolu.dll Syntax public static class StringUtils Methods | Edit this page View Source JoinStrings(IEnumerable<string?>, char) Concatenates the members of a constructed System.Collections.Generic.IEnumerable`1 collection of type System.String, using the specified separator between each member. Declaration public static string JoinStrings(this IEnumerable<string?> texts, char separator) Parameters Type Name Description IEnumerable<string> texts A collection that contains the strings to concatenate. char separator The string to use as a separator.separator is included in the returned string only if values has more than one element. Returns Type Description string values is null. Exceptions Type Condition ArgumentNullException texts is null. OutOfMemoryException The length of the resulting string overflows the maximum allowed length (System.Int32.MaxValue). | Edit this page View Source JoinStrings(IEnumerable<string?>, string) Concatenates the members of a constructed System.Collections.Generic.IEnumerable`1 collection of type System.String, using the specified separator between each member. Declaration public static string JoinStrings(this IEnumerable<string?> texts, string separator) Parameters Type Name Description IEnumerable<string> texts A collection that contains the strings to concatenate. string separator The string to use as a separator.separator is included in the returned string only if values has more than one element. Returns Type Description string values is null. Exceptions Type Condition ArgumentNullException texts is null. OutOfMemoryException The length of the resulting string overflows the maximum allowed length (System.Int32.MaxValue). | Edit this page View Source Repeat(string, int) Repeat string. Declaration public static string Repeat(this string str, int repeat) Parameters Type Name Description string str The target string. int repeat Returns Type Description string The value."
  },
  "api/Yolu.Text.html": {
    "href": "api/Yolu.Text.html",
    "title": "Namespace Yolu.Text | Yolu",
    "keywords": "Namespace Yolu.Text Classes StringUtils Provides utility methods for working with strings."
  },
  "api/Yolu.Threading.IInterlockedOperations-1.html": {
    "href": "api/Yolu.Threading.IInterlockedOperations-1.html",
    "title": "Interface IInterlockedOperations<T> | Yolu",
    "keywords": "Interface IInterlockedOperations<T> Represents interlocked operations. Namespace: Yolu.Threading Assembly: Yolu.dll Syntax public interface IInterlockedOperations<T> Type Parameters Name Description T The type that supports interlocked operations. Methods | Edit this page View Source CompareExchange(ref T, T, T) Compares two values for equality and, if they are equal, replaces the first value. Declaration public static abstract T CompareExchange(ref T location, T value, T comparand) Parameters Type Name Description T location The destination, whose value is compared with comparand and possibly replaced. T value The value that replaces the destination value if the comparison results in equality. T comparand The value that is compared to the value at location. Returns Type Description T The original value in location. | Edit this page View Source VolatileRead(ref readonly T) Reads the value of the specified location. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method. Declaration public static abstract T VolatileRead(ref readonly T location) Parameters Type Name Description T location The location of the value. Returns Type Description T The value that was read. | Edit this page View Source VolatileWrite(ref T, T) Writes the specified value to the specified location. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method. Declaration public static abstract void VolatileWrite(ref T location, T value) Parameters Type Name Description T location The location of the value. T value The value to write."
  },
  "api/Yolu.Threading.Tasks.Dispatching.Dispatcher.html": {
    "href": "api/Yolu.Threading.Tasks.Dispatching.Dispatcher.html",
    "title": "Class Dispatcher | Yolu",
    "keywords": "Class Dispatcher Inheritance object Dispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Threading.Tasks.Dispatching Assembly: Yolu.dll Syntax public class Dispatcher Constructors | Edit this page View Source Dispatcher() Declaration public Dispatcher() Properties | Edit this page View Source Thread Declaration public Thread Thread { get; } Property Value Type Description Thread Methods | Edit this page View Source ~Dispatcher() Declaration protected ~Dispatcher() | Edit this page View Source InvokeAsync(Action) Declaration public Task InvokeAsync(Action action) Parameters Type Name Description Action action Returns Type Description Task Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Threading.Tasks.Dispatching.html": {
    "href": "api/Yolu.Threading.Tasks.Dispatching.html",
    "title": "Namespace Yolu.Threading.Tasks.Dispatching | Yolu",
    "keywords": "Namespace Yolu.Threading.Tasks.Dispatching Classes Dispatcher"
  },
  "api/Yolu.Threading.Tasks.Timers.ITicker.html": {
    "href": "api/Yolu.Threading.Tasks.Timers.ITicker.html",
    "title": "Interface ITicker | Yolu",
    "keywords": "Interface ITicker A ticker makes sure that animations get triggered to advance and progress through their different stages. Inherited Members IDisposable.Dispose() Namespace: Yolu.Threading.Tasks.Timers Assembly: Yolu.dll Syntax public interface ITicker : IDisposable Properties | Edit this page View Source Fire The Action that is triggered when this ticker interval has been reached. Declaration Action Fire { get; set; } Property Value Type Description Action | Edit this page View Source IsRunning Specifies whether this ticker is currently running. Declaration bool IsRunning { get; } Property Value Type Description bool | Edit this page View Source MaxFps Maximum frames per second this ticker can handle. Declaration int MaxFps { get; set; } Property Value Type Description int | Edit this page View Source SystemEnabled Specifies whether this ticker is system enabled. Declaration bool SystemEnabled { get; } Property Value Type Description bool Remarks If false, it might be disabled by the device energy savings for instance. Methods | Edit this page View Source Start() Starts running this ticker. Declaration void Start() | Edit this page View Source Stop() Stops this ticker from running. Declaration void Stop() Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Threading.Tasks.Timers.Ticker.html": {
    "href": "api/Yolu.Threading.Tasks.Timers.Ticker.html",
    "title": "Class Ticker | Yolu",
    "keywords": "Class Ticker Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Inheritance object Ticker Implements ITicker IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu.Threading.Tasks.Timers Assembly: Yolu.dll Syntax public class Ticker : ITicker, IDisposable Properties | Edit this page View Source Fire The Action that is triggered when this ticker interval has been reached. Declaration public Action Fire { get; set; } Property Value Type Description Action | Edit this page View Source IsRunning Specifies whether this ticker is currently running. Declaration public virtual bool IsRunning { get; } Property Value Type Description bool | Edit this page View Source MaxFps Maximum frames per second this ticker can handle. Declaration public virtual int MaxFps { get; set; } Property Value Type Description int | Edit this page View Source SystemEnabled Specifies whether this ticker is system enabled. Declaration public virtual bool SystemEnabled { get; } Property Value Type Description bool Remarks If false, it might be disabled by the device energy savings for instance. Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Start() Starts running this ticker. Declaration public virtual void Start() | Edit this page View Source Stop() Stops this ticker from running. Declaration public virtual void Stop() Implements ITicker IDisposable Extension Methods TaskUtils.AsTask<T>(T) TaskUtils.AsValueTask<T>(T)"
  },
  "api/Yolu.Threading.Tasks.Timers.html": {
    "href": "api/Yolu.Threading.Tasks.Timers.html",
    "title": "Namespace Yolu.Threading.Tasks.Timers | Yolu",
    "keywords": "Namespace Yolu.Threading.Tasks.Timers Classes Ticker Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Interfaces ITicker A ticker makes sure that animations get triggered to advance and progress through their different stages."
  },
  "api/Yolu.Threading.html": {
    "href": "api/Yolu.Threading.html",
    "title": "Namespace Yolu.Threading | Yolu",
    "keywords": "Namespace Yolu.Threading Interfaces IInterlockedOperations<T> Represents interlocked operations."
  },
  "api/Yolu.TryCatchUtils.html": {
    "href": "api/Yolu.TryCatchUtils.html",
    "title": "Class TryCatchUtils | Yolu",
    "keywords": "Class TryCatchUtils Inheritance object TryCatchUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Yolu Assembly: Yolu.dll Syntax public static class TryCatchUtils Methods | Edit this page View Source Try<T>(Func<Task<T>>) Executes an asynchronous function and returns its result, or the default value for the type if an exception is thrown. Declaration public static Task<T?> Try<T>(Func<Task<T>> func) Parameters Type Name Description Func<Task<T>> func The asynchronous function to execute. Returns Type Description Task<T> A task that represents the asynchronous operation. The task result is the result of the function, or the default value for the type if an exception is thrown. Type Parameters Name Description T The type of the return value. | Edit this page View Source Try<T>(Func<Task<T>>, T) Executes an asynchronous function and returns its result, or a specified value if an exception is thrown. Declaration public static Task<T> Try<T>(Func<Task<T>> func, T whenCatch) Parameters Type Name Description Func<Task<T>> func The asynchronous function to execute. T whenCatch The value to return if an exception is thrown. Returns Type Description Task<T> A task that represents the asynchronous operation. The task result is the result of the function, or the specified value if an exception is thrown. Type Parameters Name Description T The type of the return value. | Edit this page View Source Try<T>(Func<T>) Executes a function and returns its result, or the default value for the type if an exception is thrown. Declaration public static T? Try<T>(Func<T> func) Parameters Type Name Description Func<T> func The function to execute. Returns Type Description T The result of the function, or the default value for the type if an exception is thrown. Type Parameters Name Description T The type of the return value. | Edit this page View Source Try<T>(Func<T>, T) Executes a function and returns its result, or a specified value if an exception is thrown. Declaration public static T Try<T>(Func<T> func, T whenCatch) Parameters Type Name Description Func<T> func The function to execute. T whenCatch The value to return if an exception is thrown. Returns Type Description T The result of the function, or the specified value if an exception is thrown. Type Parameters Name Description T The type of the return value. | Edit this page View Source Try<T, TException>(Func<Task<T>>, Func<TException, T>) Executes an asynchronous function and returns its result, or the result of a second function if a specific exception is thrown. Declaration public static Task<T> Try<T, TException>(Func<Task<T>> func, Func<TException, T> whenCatch) where TException : Exception Parameters Type Name Description Func<Task<T>> func The asynchronous function to execute. Func<TException, T> whenCatch The function to execute if the specified exception is thrown. Returns Type Description Task<T> A task that represents the asynchronous operation. The task result is the result of the function, or the result of the second function if the specified exception is thrown. Type Parameters Name Description T The type of the return value. TException The type of the exception to catch. | Edit this page View Source Try<T, TException>(Func<T>, Func<TException, T>) Executes a function and returns its result, or the result of a second function if a specific exception is thrown. Declaration public static T Try<T, TException>(Func<T> func, Func<TException, T> whenCatch) where TException : Exception Parameters Type Name Description Func<T> func The function to execute. Func<TException, T> whenCatch The function to execute if the specified exception is thrown. Returns Type Description T The result of the function, or the result of the second function if the specified exception is thrown. Type Parameters Name Description T The type of the return value. TException The type of the exception to catch."
  },
  "api/Yolu.html": {
    "href": "api/Yolu.html",
    "title": "Namespace Yolu | Yolu",
    "keywords": "Namespace Yolu Classes DelegateHelpers Represents various extensions of delegates. Disposable DisposableHandler DisposableUtils Error Represents the general error. ErrorId Error<TPayload> Represents the general error. Foreach Provides a foreach loop with a specified range using the Range type. LibrarySettings Pipeline Represents Express functional programming-like pipeline operators with method chains Subject<T> Represents a subject that both observes and provides notifications. SubscriberExtensions TryCatchUtils Structs AsyncPipeline<T> Represents pipeline operator. Foreach.RangeEnumerator Observer<T> Pipeline<T> Represents Express functional programming-like pipeline operators with method chains Interfaces IDeepCloneable An interface for objects that can be cloned. This creates a deep copy of the object. IDeepCloneable<T> A generic interface for a deeply cloneable type. ISingleton<TSelf> Represents singleton pattern. Delegates RefAction<T, TArgs> Represents action that accepts arbitrary value by reference."
  },
  "docs/buffer.html": {
    "href": "docs/buffer.html",
    "title": "| Yolu",
    "keywords": ""
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Yolu | Yolu",
    "keywords": "Yolu Yolu provides utilities and language extensions aimed to improve development productivity and extend the .NET API with unique features. Documentation https://le-nn.github.io/yolu/ Install Please install via package manager. .NET CLI PackageReference dotnet add package Yolu --version VERSION_NUMBER <PackageReference Include=\"Yolu\" Version=\"VERSION_NUMBER\" /> Install from Nuget https://www.nuget.org/packages/yolu Features Introducing some of the functions Range Expression Foreach: Make range expression available in foreach. Arrays: Provides a safe, fast, convenient and unified array/mutable-array Buffer: Provides utils and a mechanism to safely and quickly pool Buffers containing native memory Error/TryCatch : It supplements features that are not sufficient with system exceptions, and provides a mechanism to handle them safely and type-safely. Pipeline: Express functional programming-like pipeline operators with method chains Utils: Provides various utils, helpers and extensions"
  }
}